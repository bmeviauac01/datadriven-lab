{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course overview","text":"<p>For the requirements, please visit the official data sheet.</p> <p>For the schedule of the course and the deadlines for submission, please refer to the course site in Moodle.</p>"},{"location":"#submitting-the-solutions","title":"Submitting the solutions","text":"<p>Each lab must be submitted in a personal git repository. Please refer to the detailed guideline here. You must carefully study these guidelines!</p> <p>IMPORTANT</p> <p>The submissions of the lab exercises must follow these guidelines. Submissions not following these guidelines are not graded.</p> <p>Workflow errors, i.e., not following the guidelines (e.g., not assigning the right person or not assigning at all, are penalized.</p>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Some of the exercises require you to create a screenshot. This screenshot is proof of the completion of the exercise. The expected content of these screenshots is detailed in the exercise description.  The screenshot may include the entire desktop or just the required portion of the screen.</p> <p>You must submit the screenshots as part of the solution code, uploaded to the git repository. The repositories are private; only you and the instructions can access them. If there is any content on the screenshot that is not relevant to the exercise and you would like to remove it, you can obscure these parts.</p>"},{"location":"#grading","title":"Grading","text":"<p>Each laboratory is graded on a 1-5 scale. You must submit each lab by the deadline. The laboratory grade is calculated based on the 20+3 points you can earn in each lab as follows:</p> <ul> <li>0-7.5 point: failed</li> <li>8-10.5 point: pass</li> <li>11-13.5 point: satisfactory</li> <li>14-16.5 point: good</li> <li>17-20+ points: very good</li> </ul> <p>The extra +3 points are optional; if you do them, it is added to the points. In the automated evaluation, these extra 3 points will appear as \"imsc\"; please ignore this (that is for the Hungarian students).</p> <p>The final grade will be the mathematically correct average of the individual (1-5 scale) grades. If you do not attend a lab or do not submit it until the deadline, it will be counted as grade 1 in the average.</p> <p>Some of the exercises are evaluated automatically. Your code will be executed; therefore, you must follow the exercise descriptions precisely (e.g., use the provided code skeleton, change only the allowed parts of the code, etc.).</p> <p>You will receive a preliminary result about your submission in GitHub; see in the guideline here). If there are some issues you need to diagnose, the entire log of the execution is available for you on the GitHub Actions web page. A short introduction is provided here.</p>"},{"location":"#our-expectations-regarding-the-labs","title":"Our expectations regarding the labs","text":"<p>Where should I upload the solution? See above.</p> <p>Individual work at home? Since your work is graded, you are expected to submit your own solution. This does not mean that you cannot ask or give help to others. But it prohibits submitting a work created by someone else. This is the reason we ask for screenshots: these verify the process of completing the exercises.</p> <p>Submitting the work of someone else: Refer to the Ethical codex and the Code of Studies.</p> <p>One lab is just 4 hours, right? No. This course is 3 credits, which (officially) translates to approx. 90 hours of work invested throughout the semester. The lab is not just the 4 hours you spend with the instructor; it also involves preliminary preparation and finishing/completing the tasks at home.</p> <p>My code contains a small typo, and I received no grade. You are expected to write code that works! You are completing the exercises in front of a computer, so you have everything you need to check yourself. Your code must compile and must run. If the behavior is not entirely correct, that is accepted. But if it does not even compile, it will not be graded.</p> <p>Just imagine what would happen if you committed code that does not compile at your workplace?</p> <p>If I am working at home, how do I get help? Talk to your lab instructor.</p> <p>The instructor does not help. Why? You might not be given the right solution if you face a problem. But this does not mean you get no help. You are encouraged to investigate your problems, search for solutions, and ask specific issues. You must demonstrate that you are a professional!</p> <p>How should I ask questions then? In short: https://stackoverflow.com/help/how-to-ask. In more detail: If you are stuck, first, make an effort to understand your problem. The problem is not that \"it does not work\" or \"I don't know how to do it.\" You can ask good questions once you understand the problem and have tested some solutions already.</p> <p>So the answer is Google and StackOverflow? No. Everything you need here, you should already know. Google is an excellent tool, and StackOverflow is even better. However... You also need to understand the answer you find here. The answer you find here might be a solution to some problem, but not necessarily your issue.</p> <p>All these deadlines and rules! A software developer, better yet, an engineer, must be prepared to write code and work within the scope of prescribed rules. The world is complex, and complexity is often managed with rules. If you have some time, check what Robert C. Martin (Bob Martin, \"Uncle Bob\") has to say about the origins of the software developer profession: https://www.youtube.com/watch?v=ecIWPzGEbFc</p> <p>Pull requests welcome</p> <p>As a student of this course, you can earn extra credit by contributing to the materials! Open a pull request to fix an error or contribute to the contents in any way! Check the link to the repository in the upper right corner.</p> <p>License</p> <p>The materials provided here are created for the students of course BMEVIAUAC09. The usage of these materials outside the scope of teaching or learning this particular course is only granted if the source and authors are contributed.</p> <p>These materials are to be viewed within the context of the course. For any other usage scenarios, the material is provided as-is.</p>"},{"location":"GitHub-Actions/","title":"Using GitHub Actions","text":"<p>The semi-automatic evaluation of the exercises is based on GitHub Actions. It is a CI system capable of running jobs on git repositories. We use this system, for example, to compile your code and test it.</p> <p>You will receive a notification about the results in a pull request. But if you need more details, such as checking the application logs, you can access these using the GitHub web interface under Actions.</p> <p></p> <p>Here, you will see a list of Workflows.</p> <p></p> <p>By selecting one (e.g., the last one is always at the top of the list), you see this workflow's details. To get to the logs, you need to click once more on the left. The log will be on the right side.</p> <p></p> <p>Each green checkmark is a successful step. These steps do not correspond to your exercises; these describe the evaluation process. These steps include preparations, such as setting up the .NET environment for compiling your code (since each workflow starts in a clean environment, these steps are performed each time).</p> <p>Most of these steps should be successful, even if your submission contains an error. The two exceptions when these tasks might fail due to your changes are: (1) if <code>neptun.txt</code> is missing, or (2) your C# code does not compile. The <code>neptun.txt</code> is mandatory, and no evaluation is performed until that is provided. The C# compilation is a step that must succeed; otherwise, your application cannot be started.</p> <p>There might be transient errors in these workflows. An example is when a download, such as the download of the .NET environment fails. The workflow execution can be repeated if this occurs. Retrying the execution may only help if the problem is indeed transient; a retry will not resolve a C# compilation error. (You can deduce the cause from the name of the step and the error message.)</p> <p></p> <p>You might also be able to access the application logs. E.g., when testing a .NET application, it is started, and the logs will be printed here.</p> <p>The image below shows the initialization of an Entity Framework application, where you can also see the translated and executed SQL commands. (You would see the same in Visual Studio Output while debugging.) The content here, obviously, depends on the actual exercise.</p> <p></p>"},{"location":"GitHub-credentials/","title":"In university laboratories: GitHub access","text":"<p>The computers may remember the GitHub credentials. You should delete this at the end of the lab.</p> <ol> <li>Open <code>Credential Manager</code> from the Start menu.</li> <li>On the page <code>Windows Credentials</code> find the entry for GitHub and delete it.    </li> </ol>"},{"location":"GitHub/","title":"Submitting your work (GitHub)","text":"<p>We are using GitHub to submit the solutions. Each laboratory is submitted in a GitHub repository that you will create through a provided link. The solution of the laboratory exercises is created within these repositories, then committed and pushed to GitHub. The submission is finished with a pull request assigned to the laboratory instructor with GitHub name <code>mradazzouz</code>.</p> <p>IMPORTANT</p> <p>The submission requirements detailed below are mandatory. Submissions not following these guidelines are not graded.</p>"},{"location":"GitHub/#short-version-aka-tldr","title":"Short version, aka. TL;DR","text":"<p>The detailed description below shows the entire procedure. This summary is an overview of the whole process.</p> <ol> <li> <p>The lab exercises are solved in a dedicated GitHub repository created using a GitHub Classroom invitation link published in Moodle.</p> </li> <li> <p>Your solution is submitted on a new branch, not on master. You can create any number of commits on this branch. You need to push these commits to GitHub.</p> </li> <li> <p>You submit your final solution through a pull request assigned to the laboratory instructor.</p> </li> <li> <p>You can ask questions regarding the results and evaluation in the pull request comment thread. To notify your instructor use the <code>@name</code> annotation in the comment text.</p> </li> </ol>"},{"location":"GitHub/#starting-your-work-git-checkout","title":"Starting your work: git checkout","text":"<ol> <li> <p>Register a GitHub account if you don't have one yet.</p> </li> <li> <p>Open the course page in Moodle and find the invitation URL. This link is different for each lab; make sure to use the right one.</p> </li> <li> <p>If needed, authorize the GitHub Classroom application to use your account data. (This page will be displayed the first time you click the link in the previous step.)</p> <p></p> </li> <li> <p>You will see a page where you can \"Accept the ... assignment\". Click the button.</p> <p></p> </li> <li> <p>Wait for the repository creation to finish. You will get the repository URL here.</p> <p>Note</p> <p>The repository will be private. No one but you and the instructors will see it.</p> <p></p> </li> <li> <p>Open the repository webpage by following the link. You will need this URL, so remember it.</p> <p></p> </li> <li> <p>Clone your repository. You will need the repository git URL, which you can get from the repository webpage following the Clone or download button.</p> <p>You may use any git client. The simplest one is GitHub Desktop if you do not have a favorite yet. You can list your repositories in this application directly from GitHub.</p> <p></p> <p>If you are using the console or shell, the following command performs the clone (if the <code>git</code> command is available): <code>git clone &lt;repository link&gt;</code></p> </li> <li> <p>If the cloning is successful, DO NOT START WORKING YET! The solution should not be committed to the repository <code>master</code> branch. Instead, create a new branch with the name <code>solution</code>.</p> <p>In GitHub Desktop, use the Branch menu for creating a new one.</p> <p></p> <p>If using the console, use the following command: <code>git checkout -b solution</code></p> </li> <li> <p>Complete the exercises on this branch. You may have any number of commits and pushes.</p> <p>In university laboratories</p> <p>Before you make your first commit, check whether your name and email address are properly configured. You can check this using the following commands.</p> <pre><code>git config user.name\ngit config user.email\n</code></pre> <p>If the values are not correct, set your name and email address with the following commands executed in the repository directory. This will set the values for the repository. (It is recommended to set the email address to the one you use with GitHub.)</p> <pre><code>git config user.name \"John Doe\"\ngit config user.email \"john@doe.org\"\n</code></pre> <p>At home</p> <p>When working from home, you may want to set the name and email address globally using the <code>--global</code> switch in the commands above.</p> <p>To commit using GitHub Desktop, first check if you are on the correct branch. During the first push, the solution branch needs to be published.</p> <p></p> <p>When adding further commits, verify the branch. You can publish the commit using the Push origin button. The tiny number on this button shows you how many commits need pushing.</p> <p></p> <p>If you are using the console, use the following commands:</p> <pre><code># Check the current branch and the files modified\ngit status\n\n# Prepares all changes for commit\ngit add .\n\n# Commit\ngit commit -m \"f1\"\n\n# Push the new branch (first time)\ngit push --set-upstream origin solution\n\n# Push further commits\ngit push\n</code></pre> </li> </ol>"},{"location":"GitHub/#submitting-the-solution","title":"Submitting the solution","text":"<ol> <li> <p>When you are ready with the exercises, verify on the repository web page that you uploaded everything. You may need to switch branches.</p> <p></p> <p>GitHub web file upload</p> <p>We recommend that you do not use the GitHub web file upload. If something is missing, add it to your local repository and commit and push again.</p> </li> <li> <p>When you are truly ready, open a pull request.</p> <p>Why the pull request?</p> <p>This pull request combines all changes you made and shows us the final result. This helps the laboratory instructor to evaluate your submission more easily. This pull request means you submit your solution; hence this step cannot be omitted.</p> <p>To open the pull request, you need to go to the repository's GitHub web frontend. If you pushed recently, GitHub offers you to create the pull request.</p> <p></p> <p>You may also open the pull request from the menu at the top. It is important to specify the correct branches: <code>master</code> is the target into which <code>solution</code> is merged.</p> <p></p> <p>When the pull request is created, you will see a little number \"1\" on the Pull request menu showing you that there is one open item there. YOU ARE NOT FINISHED YET!</p> <p></p> </li> <li> <p>The pull request will trigger a preliminary evaluation. You will see the result of this evaluation as a comment added to the pull request thread.</p> <p>This will be different for each laboratory. You will see the result in a comment in the pull request thread.</p> <p></p> <p>If you need more information about the evaluation and the results, GitHub Actions can provide you more. A short introduction is provided here.</p> </li> <li> <p>If you are not satisfied with your work, you can make further changes. You only need to commit and push your changes. Any changes pushed will re-trigger the evaluation of the pull request. We ask that you trigger NO MORE THAN 5 evaluations!</p> <p>Making further changes without running the evaluation</p> <p>If you want to make changes to your submission and not have the re-evaluation run, you should convert the pull request to draft.</p> <p></p> <p>This state means work in progress. You can commit and push freely. These will not trigger any evaluation. Once ready, you must change the state back: go to the bottom of the PR and click \"Ready for review.\" This will set the PR back to its normal state and trigger an automated evaluation.</p> <p></p> <p>Maximum 5</p> <p>Evaluations that fail due to transient errors, such as network problems, are not counted into the 5 evaluations. But if you trigger more evaluation by mistake or on purpose, it will be sanctioned. You are required to test your solution locally before submitting it.</p> </li> <li> <p>FINALLY, when you are ready, assign the pull request to your laboratory instructor. This step is considered as the submission of your work.</p> <p></p> <p>Without pull request</p> <p>If you have no pull request, or it is not assigned to the instructor, we consider it work in progress and not submitted.</p> <p>Done</p> <p>Now you are ready. After assigning the pull request, make no further changes. The instructor will evaluate the submission and close the pull request.</p> </li> </ol>"},{"location":"GitHub/#questions-and-complaints-regarding-the-final-result","title":"Questions and complaints regarding the final result","text":"<p>If you have questions or concerns regarding the automated evaluation, use the pull request for communication with the instructor by asking questions via comments. To let the instructor know you have questions, please use <code>@mradazzouz</code> mention in the PR comment. This will automatically send an email notification.</p> <p></p> <p>Please provide proof</p> <p>Please note that if you think the evaluation made a mistake, you must support your question/complaint with proof (e.g., show how you tested your solution and prove that it worked).</p>"},{"location":"VisualStudio/","title":"Install Visual Studio &amp; .NET SDK","text":"<p>In some of the exercises require Microsoft Visual Studio version 2022 17.8 or newer. The free Community edition is sufficient for solving these exercises.</p> <p>You can check the version by starting the Visual Studio Installer:</p> <p></p> <p>VS Code</p> <p>The exercises can also be solved using the platform-independent Visual Studio Code. The skeletons of the exercises are prepared for Visual Studio. If you are working with VS Code, you need to configure your environment.</p>"},{"location":"VisualStudio/#visual-studio-workloads","title":"Visual Studio workloads","text":"<p>When installing Visual Studio, the following workloads have to be selected:</p> <ul> <li>ASP.NET and web development</li> <li>Data Storage and Processing</li> </ul> <p></p> <p>An existing installation can be modified using the Visual Studio Installer.</p> <p></p>"},{"location":"VisualStudio/#check-and-install-net-sdk","title":"Check and install .NET SDK","text":"<p>Visual Studio might install certain versions of the .NET SDK. To check if you have the right version, use the <code>dotnet</code> CLI: in a console, execute the <code>dotnet --list-sdks</code> command. This command works on Linux and Mac too. It will print something similar:</p> <pre><code>PS C:\\Users\\toth.tibor&gt; dotnet --list-sdks\n8.0.100 [C:\\Program Files\\dotnet\\sdk]\n</code></pre> <p>If you see version 8.0.x in this list, then you are good to go. Otherwise, install the SDK from here.</p>"},{"location":"Lab-EFREST/","title":"Entity Framework and REST","text":"<p>During the lab, we create a REST API (ASP.NET Core Web Api) application based on Entity Framework Core data access.</p>"},{"location":"Lab-EFREST/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>Postman</li> <li>DB Browser for SQLite - if you would like to check the database (not necessary)</li> <li>GitHub account and a git client</li> <li>Microsoft Visual Studio 2022 with the settings here<ul> <li>When using Linux or macOS, you can use Visual Studio Code, the .NET SDK, and dotnet CLI.</li> </ul> </li> <li> <p>.NET 8 SDK</p> <p>.NET 8.0</p> <p>Mind the version! You need .NET SDK version 8.0 to solve these exercises.</p> <p>On Windows, it might already be installed along with Visual Studio (see here how to check it); if not, use the link above to install (the SDK and not the runtime). You need to install it manually when using Linux or macOS.</p> </li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Entity Framework, REST API, Web API, and using Postman<ul> <li>Check the materials of Data-driven systems including the seminars</li> </ul> </li> </ul>"},{"location":"Lab-EFREST/#exercise-overview","title":"Exercise overview","text":"<p>In this exercise, we will implement the backend of a simple task management web application. The application handles two types of entities: statuses and tasks where a status is associated with multiple tasks (1-* connection). (In the text of the exercises, will use tasks only for referring to this entity of the application.)</p> <p>If we had a frontend, the application would be a Kanban-board. We will not create a frontend here, only the REST API and Entity Framework + ASP.NET Core Web API server.</p>"},{"location":"Lab-EFREST/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-EFREST/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> </li> </ol> <p>!!! warning \"Password in the labs\"         If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> <ol> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-EFREST/#creating-the-database","title":"Creating the database","text":"<p>We will not be using Microsoft SQL Server here, but Sqlite. It is a light-weight relational database management system mainly for client-side applications. Although it is not recommended for servers, we will use it for simplicity. Sqlite requires no installation.</p> <p>We will define the database schema with code first using C# code. Therefore, we will not need to create the schema with SQL commands.</p>"},{"location":"Lab-EFREST/#exercise-1-managing-statuses-8-points","title":"Exercise 1: Managing statuses (8 points)","text":"<p>In this exercise, we will implement the basic management of status entities.</p>"},{"location":"Lab-EFREST/#open-the-visual-studio-solution","title":"Open the Visual Studio solution","text":"<p>Open the Visual Studio solution (the <code>.sln</code>) file in the checked-out repository. If Visual Studio tells you that the project is not supported, you need to install a missing component (see here).</p> <p>Do NOT upgrade any version</p> <p>Do not upgrade the project, the .NET version, or any Nuget package! If you see such a question, always choose no!</p> <p>The solution is structured according to a multi-tier architecture:</p> <ul> <li>The <code>Controllers</code> folder contains the Web Api controllers that serve the REST requests.</li> <li>The <code>Song</code> folder contains the data access layer that contains the Entity Framework Core Code First model.</li> <li>The <code>Services</code> folder contains the business logic layer (BLL) service classes.</li> <li><code>Dtos</code> contains the classes of Data Transfer Objects, which represent the data traveling on the network.</li> </ul> <p>DTO in BLL layer?</p> <p>Since the BLL layer does not have a separate so-called Domain data model, in the BLL layer, we use a mixture of DTOs and Entities. Entities are saved and queried by the service, but it expects DTOs and returns them in the method signature.</p> <p>Repository sample</p> <p>The Repository and Unit-of-Work design patterns would provide an abstraction for our data access. If we think about it more, the Entity Framework implements this pattern through DbContext and DbSets. Regardless, it can sometimes be advisable to create your own repository abstraction if you also want to abstract that data access works with EF.</p> <p>Now, also for the sake of simplicity, we will not use the Repository pattern.</p> <p>During your work, work in the <code>StatusService</code> and <code>StatusController</code> classes! You can modify the contents of these files as you like (provided that the service still conforms to the <code>IStatusService</code> interface and of course the code still compiles).</p>"},{"location":"Lab-EFREST/#start-the-web-app","title":"Start the web app","text":"<p>Check if the web application starts.</p> <ol> <li> <p>Compile the code and start in Visual Studio.</p> </li> <li> <p>Open URL http://localhost:5000/api/ping in a browser.</p> </li> </ol> <p>If everything goes well, you see the response \"pong\" in the browser, and the incoming request is logged in the console.</p>"},{"location":"Lab-EFREST/#list-all-statuses-4-points","title":"List all statuses (4 points)","text":"<p>Implement the first operation to list all available status entities.</p> <ol> <li> <p>Open class <code>Model.Status</code>. This is the entity class used by the business layer.</p> <p>Do NOT make any changes to this class.</p> <p>Records in C#</p> <p>The <code>record</code> keyword represents a type (by default <code>class</code>) that has the constructor defined in the header and the <code>init</code> only setter has properties. This makes a record have immutable behavior, which better matches the behavior of a DTO. Records also have other conveniences (see more), but we will not take advantage of here.</p> </li> <li> <p>Open class <code>DAL.EfDbContext.DbStatus</code>. This is the Entity Framework and database representation of the same entity. Let us implement this class:</p> <pre><code>public class DbStatus\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n</code></pre> <p>The <code>Id</code> is the primary key in the database, and <code>Name</code> is the name of the status.</p> </li> <li> <p>Open class <code>DAL.EfDbContext.TasksDbContext</code>. We need to add a new DbSet property here and configure the C# - database mapping in method <code>OnModelCreating</code>:</p> TasksDbContext.cs<pre><code>public DbSet&lt;DbStatus&gt; Statuses { get; set; }\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;DbStatus&gt;()\n        .ToTable(\"statuses\");\n\n    modelBuilder.Entity&lt;DbStatus&gt;()\n        .HasKey(s =&gt; s.Id);\n\n    modelBuilder.Entity&lt;DbStatus&gt;()\n        .Property(s =&gt; s.Name)\n        .HasMaxLength(50)\n        .IsRequired(required: true)\n        .IsUnicode(unicode: true);\n    }\n</code></pre> <p>This configuration sets the name of the table in the database, the key (which will generate values automatically), and the constraints related to the name field.</p> </li> <li> <p>Go to the method <code>StatusService.List()</code>. Let us list all statuses from the database:</p> <pre><code>public IReadOnlyCollection&lt;Dtos.Status&gt; List()\n{\n    return _dbContext.Statuses.Select(ToModel).ToList();\n}\n</code></pre> <p>The variable <code>_dbContext</code> represents our database, the DbContext, injected via the framework.</p> </li> <li> <p>The <code>ToModel</code> function will be a helper function that will be used several times. This maps the C# class coming from the database to another C# class used as a model. Let's write this here in the service class.</p> <pre><code>private Status ToModel(DbStatus value)\n{\n    return new Status(value.Id, value.Name);\n}\n</code></pre> </li> <li> <p>After the BLL layer comes the controller. Open the <code>Controllers.StatusController</code> class. Append your Neptun code to the end of the controller's URL, so the controller handles requests to <code>/api/status/neptun</code>, where the last 6 lowercase characters are your own Neptun code.</p> <pre><code>[Route(\"api/[controller]/neptun\")]\n[ApiController]\npublic class StatusController : ControllerBase\n</code></pre> <p>Neptun code is important</p> <p>The Neptun code shall appear in screenshots later. You must add it as specified above!</p> </li> <li> <p>Let's write the endpoint responding to the <code>GET /api/status/neptun</code> request: Dependency injection is already configured, so the constructor takes over the service interface (not the service class we wrote!).</p> StatusController.cs<pre><code>[HttpGet]\npublic IEnumerable&lt;Status&gt; List()\n{\n    return _statusService.List();\n}\n</code></pre> </li> <li> <p>Compile the code and start the app.</p> </li> <li> <p>Open Postman and send a GET request to URL http://localhost:5000/api/statuses/neptun (with your Neptun code in the URL).</p> <p></p> <p>The query is successful if Postman reports status code 200, and the result is empty. If there is an error, check the Output window in Visual Studio and the running application console window.</p> </li> <li> <p>It is difficult to test with an empty database. Stop the running application, navigate to the function <code>Dal.TasksDbContext.OnModelCreating</code> and insert seed data into the database:</p> TasksDbContext.cs<pre><code>protected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    // ...\n\n    modelBuilder.Entity&lt;DbStatus&gt;()\n        .HasData(new[]\n        {\n            new DbStatus() { Id = 1, Name = \"new\" },\n            new DbStatus() { Id = 2, Name = \"in progress\" },\n        });\n}\n</code></pre> </li> <li> <p>Compile the code again, then start the application and repeat the same GET query. The response shall include the two statuses.</p> <p>If you do not see the status records</p> <p>If the two seed objects do not appear in the response, it is possible that the DB was not updated and the <code>HasData</code> operation did not take effect. Delete the <code>tasks.db</code> SQLite file, as a result of which the database file will be created again when the app starts with our test data.</p> <p>Schema and data changes of this kind are usually solved in a live environment with migrations. For simplicity, we will avoid this, and if the schema changes, you can simply delete the <code>tasks.db</code> file.</p> </li> </ol>"},{"location":"Lab-EFREST/#query-and-insert-operations-4-points","title":"Query and insert operations (4 points)","text":"<p>There are a few other operations we need to implement:</p> <ul> <li>check existence by specifying name (<code>HEAD /api/statuses/neptun/{name}</code>),</li> <li>find record by ID (<code>GET /api/statuses/neptun/{id}</code>),</li> <li>adding a new status record (<code>POST /api/statuses/neptun</code>).</li> </ul> <p>Let us implement these.</p> <ol> <li> <p>Let's implement the first two first in <code>StatusService</code>. Make sure that the name-based search is case-sensitive!</p> <pre><code>public bool ExistsWithName(string statusName)\n{\n    return _dbContext.Statuses.Any(s =&gt; EF.Functions.Like(s.Name, statusName));\n}\n\npublic Status FindById(int statusId)\n{\n    var status = _dbContext.Statuses.SingleOrDefault(s =&gt; s.Id == statusId);\n    return status == null ? null : ToModel(status);\n}\n</code></pre> <p>With the <code>EF.Functions.Like</code> statement, we \"map\" an SQL statement to Entity Framework. When the system prepares the SQL statement from this, the `LIKE' operator corresponding to the platform will be generated. This solution is for case-independent comparison, as Contains would not work this way by default in SQLite.</p> </li> <li> <p>The controller endpoints for these operations are:</p> <pre><code>[HttpHead(\"{statusName}\")]\n[ProducesResponseType(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\npublic ActionResult ExistsWithName(string statusName)\n{\n    return _statusService.ExistsWithName(statusName) ? Ok() : NotFound();\n}\n\n[HttpGet(\"{id}\")]\n[ProducesResponseType(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\npublic ActionResult&lt;Status&gt; Get(int id)\n{\n    var value = _statusService.FindById(id);\n    return value != null ? Ok(value) : NotFound();\n}\n</code></pre> <p>Pay attention to the attributes and return values on the controller methods! If the response has content (body in the http package), then <code>ActionResult&lt;T&gt;</code> is the return value, if only a status code is returned, then <code>ActionResult</code>. The <code>Ok</code> and <code>NotFound</code> functions are helper functions for generating the response.</p> <p>In terms of URLs, we only had to deal with the end of the URL. We put <code>/api/status/neptun</code> on the controller class, so it applies to all of them.</p> </li> <li> <p>To insert the new status, start again from the service side. For creation, we get a DTO class, <code>CreateStatus</code>, which has only one name. We want to guarantee the uniqueness of the names so that there are no two statuses with the same name. We will check this during the insertion, even here regardless of lowercase or uppercase letters.</p> <pre><code>public Status Insert(CreateStatus value)\n{\n    using var tran = _dbContext.Database.BeginTransaction(IsolationLevel.RepeatableRead);\n\n    if (_dbContext.Statuses.Any(s =&gt; EF.Functions.Like(s.Name, value.Name)))\n        throw new ArgumentException(\"Name must be unique\");\n\n    var status = new DbStatus() { Name = value.Name };\n    _dbContext.Statuses.Add(status);\n\n    _dbContext.SaveChanges();\n    tran.Commit();\n\n    return ToModel(status);\n}\n</code></pre> <p>Managing competition</p> <p>Let's pay attention to the transaction! First we need to check if a similar name already exists. If so, the error is signaled with an exception. If the record can be inserted, we must also commit the transaction after the insertion. And since the ID is generated by the database, the service function returns the created entity with the new ID inside.</p> </li> <li> <p>The POST http request is handled by the following controller endpoint:</p> <pre><code>[HttpPost]\n[ProducesResponseType(StatusCodes.Status201Created)]\n[ProducesResponseType(StatusCodes.Status400BadRequest)]\npublic ActionResult&lt;Status&gt; Create([FromBody]CreateStatus value)\n{\n    try\n    {\n        var created = _statusService.Insert(value);\n        return CreatedAtAction(nameof(Get), new { id = created.Id }, created);\n    }\n    catch (ArgumentException ex)\n    {\n        ModelState.AddModelError(nameof(CreateStatus.Name), ex.Message);\n        return ValidationProblem(ModelState);\n    }\n}\n</code></pre> <p>Note the successful and unsuccessful answers. If the insertion is successful, the helper function <code>CreatedAtAction</code> will return with a response where the body contains the new entity and the Location header is the link where the entity can be queried (hence the reference with <code>nameof(Get)</code>).</p> <p>If, on the other hand, an exception thrown in the service is received, we report the problem to the caller. In this response, the status code will be 400, and there will also be a body, which follows the format of the Problem Details RFC standard. If we want to return with a 400 error with a body of any format, we could have used the <code>BadRequest()</code> function.</p> <p>The <code>[Required]</code> attribute is also included on the <code>Name</code> property in the <code>CreateStatus</code> DTO. Because of the <code>[ApiController]</code> attribute on the controller, these validation attributes are evaluated before the action is called, and also result in a 400 error in the Problem Details format.</p> </li> <li> <p>Compile and start the app. Test the queries! Produce both successful and erroneous responses too.</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows a failed insert request and response. The cause of failure should be that an item with the same name already exists. Save the screenshot as <code>f1.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-EFREST/#exercise-2-task-operations-6-points","title":"Exercise 2: Task operations (6 points)","text":"<p>In this exercise, we will implement the basic services for tasks.</p>"},{"location":"Lab-EFREST/#preparation-with-entity-framework","title":"Preparation with Entity Framework","text":"<p>The task is represented by the DTO class <code>Dtos.Task</code>. The task has an identifier (<code>Id</code>), a title (<code>Title</code>), the <code>IsDone</code> flag indicates when it is ready, and <code>Status</code> shows the status to which the task is assigned (with a multiplicity of 1-*) .</p> <p>The first step is to create the Entity Framework model:</p> <ol> <li> <p>Define the properties required for database storage in the <code>DbTask</code> class. Make sure that the status link is a real navigation property!</p> </li> <li> <p>Add the new <code>DbSet</code> type property to <code>TasksDbContext</code>.</p> </li> <li> <p>As before, define the exact configuration of the database mapping in <code>OnModelCreating</code>. Here too, pay attention to the exact setting of the navigation property!</p> </li> <li> <p>It will be advisable to record sample data as seen earlier.</p> </li> </ol>"},{"location":"Lab-EFREST/#operations-in-the-repository","title":"Operations in the repository","text":"<p>In the <code>Dal</code> folder, create a new class called <code>TaskService</code> that implements the existing <code>ITaskService</code> interface. Perform the following actions:</p> <ul> <li><code>IReadOnlyCollection&lt;Task&gt; List()</code>: list all tasks</li> <li><code>Task FindById(int taskId)</code>: returns the task whose id matches the parameter; or return <code>null</code> if there is none</li> <li><code>Task Insert(CreateTask value)</code>: add a new task to the database with the given address and assign it to the given status; if there is no status with the specified name, add a new status; its return value is the new task entity with the new identifier</li> <li><code>Task Delete(int taskId)</code>: delete the specified task instance; its return value is the deleted task entity (in the state before deletion), or <code>null</code> if it does not exist</li> </ul> <p>Do not implement the other operations for now, but they must also have an implementation so that the code will compile. For now, it is enough if their body simply throws an error: <code>throw new NotImplementedException();</code></p> <p>Tip</p> <p>For the mapping between the C# class used in the database and the model entity class, it will be useful to define a <code>ToModel</code> helper function as seen earlier. In order for the database to query the status entity connected to the task (which will be needed for the name), it will be important to use the appropriate <code>Include</code>.</p>"},{"location":"Lab-EFREST/#operations-on-the-rest-api","title":"Operations on the REST Api","text":"<p>Create a new <code>TasksController</code> in the <code>Controllers</code> folder. The controller shall handle REST queries on URL <code>/api/tasks/neptun</code> where the last part is your own Neptun code lowercase.</p> <p>Take an instance of <code>ITaskService</code> in the controller constructor parameter. In order for the dependency injection framework to solve this at runtime, configuration will also be necessary. This interface must be registered in the `Program' class, just like the other service. (The controller does not have to be registered.)</p> <p>Implement the following operations using the previously implemented repository methods:</p> <ul> <li><code>GET /api/tasks/neptun</code>: returns all tasks; response code is always <code>200 OK</code></li> <li><code>GET /api/tasks/neptun/{id}</code>: gets a single task; response code is <code>200 OK</code> or <code>404 Not found</code></li> <li><code>POST /api/tasks/neptun</code>: add a new task based on a <code>Dto.CreateTask</code> instance specified in the body; the response code is <code>201 Created</code> with the new entity in the body and an appropriate Location header</li> <li><code>DELETE /api/tasks/neptun/{id}</code>: deleted a task; response code is <code>204 No content</code> or <code>404 Not found</code></li> </ul> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows an arbitrary request and response from the list above. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-EFREST/#exercise-3-task-operations-6-points","title":"Exercise 3: Task operations (6 points)","text":"<p>Implement two new endpoints in the controller handling tasks that alter existing tasks as follows.</p>"},{"location":"Lab-EFREST/#marking-a-task-as-done-3-points","title":"Marking a task as done (3 points)","text":"<p>The flag <code>Task.Done</code> signals that a task is completed. Create a new http endpoint that uses the <code>ITasksRepository.MarkDone</code> method to set this flag on a task instance.</p> <p>Request: <code>PATCH /api/tasks/neptun/{id}/done</code> with <code>{id}</code> being the tasks ID.</p> <p>Response:</p> <ul> <li><code>404 Not found</code> if no such task exists.</li> <li><code>200 OK</code> if the operation was successful - returns the task in the body after the modification is done.</li> </ul>"},{"location":"Lab-EFREST/#move-to-a-new-status-3-points","title":"Move to a new status (3 points)","text":"<p>A task is associated with status through <code>Task.StatusId</code> (or similar). Create a new http endpoint that uses the <code>ITasksRepository.MoveToStatus</code> method to change the status of the specified tasks to a new one. If the new status with the provided name does not exist, create one.</p> <p>Request: <code>PATCH /api/tasks/neptun/{id}/move</code> with</p> <ul> <li><code>{id}</code> is the task identifier,</li> <li>and the name of the new status comes in the body in a <code>status</code> property.</li> </ul> <p>Response:</p> <ul> <li><code>404 Not found</code> if no such task exists.</li> <li><code>200 OK</code> if the operation was successful - returns the task in the body after the modification is done.</li> </ul> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows an arbitrary request and response from the two above. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-EFREST/#exercise-4-optional-exercise-3-points","title":"Exercise 4: Optional exercise (3 points)","text":"<p>You can earn an additional +3 points with the completion of this exercise. (In the evaluation, you will see the text \"imsc\" in the exercise title; this is meant for the Hungarian students. Please ignore that.)</p> <p>If we have lots of tasks listing them should not return all of them at once. Implement a new endpoint to return a subset of the tasks (i.e., \"paging\"):</p> <ul> <li>It returns the tasks in a deterministic fashion sorted by ID.</li> <li>In the request, an optional <code>count</code> query parameter returns an element with the number of pieces specified on each page. by default, the value should be 5 if the client does not send it.</li> <li>The next page can be retrieved by declaring an optional <code>fromId</code> value. This <code>fromId</code> is the identifier of the next element in the pagination.</li> <li>The two parameters of the http request, <code>fromId</code> and <code>count</code>, should come as optional query parameters.</li> <li>Paging should be available at the existing address <code>GET /api/task/neptun/paged</code>.</li> <li>During paging, only those entities that are really needed should be queried for the answer (so don't needlessly drag the entire table into memory).<ul> <li>You could extend the <code>ITaskService</code> interface for this excercise.</li> </ul> </li> <li> <p>The paging response should be an instance of the <code>Dto.PagedTaskList</code> class. It includes:</p> <ul> <li>array of elements on the page (<code>Items</code>),</li> <li>the number of elements on the page (<code>Count</code>)</li> <li><code>fromId</code> value (<code>NextId</code>) required to retrieve the next page,</li> <li> <p>and as a help, the URL with which the next page can be retrieved (<code>NextUrl</code>), or <code>null</code> if there are no more pages.</p> <p>Generating URLs</p> <p>Use the <code>Url.Action</code> helper method to assemble this URL. Do not hardcode \"localhost:5000\" or \"/api/tasks/paged\" in the source code! You will not need string operations to achieve this.</p> <p><code>Url.Action</code> will give you an absolute URL when all parameters (<code>action</code>, <code>controller</code>, <code>values</code>, <code>protocol</code>, and <code>host</code>) are specified; for the latter ones <code>this.HttpContext.Request</code> can provide you the required values.</p> </li> </ul> </li> <li> <p>The request always returns 200 OK; if there are no items, the result set shall be empty.</p> </li> </ul> <p>The requests-responses shows you the expected behavior:</p> <ol> <li> <p><code>GET /api/tasks/neptun/paged?count=2</code></p> <p>This is the first request. There is no <code>from</code> value specified to start from the first item.</p> <p>Response:</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"title\": \"doing homework\",\n      \"done\": false,\n      \"status\": \"pending\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"doing more homework\",\n      \"done\": false,\n      \"status\": \"new\"\n    }\n  ],\n  \"count\": 2,\n  \"nextId\": 3,\n  \"nextUrl\": \"http://localhost:5000/api/task/neptun/paged?fromId=3&amp;count=2\"\n}\n</code></pre> </li> <li> <p><code>GET /api/tasks/neptun/paged?from=3&amp;count=2</code></p> <p>This is to query the second page.</p> <p>Response:</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": 3,\n      \"title\": \"hosework\",\n      \"done\": true,\n      \"status\": \"done\"\n    }\n  ],\n  \"count\": 1,\n  \"nextId\": null,\n  \"nextUrl\": null\n}\n</code></pre> <p>The response indicates no further pages as both <code>nextId</code> and <code>nextUrl</code> are null.</p> </li> <li> <p><code>GET /api/tasks/neptun/paged?from=999&amp;count=999</code></p> <p>Returns an empty page.</p> <p>Response:</p> <pre><code>{\n  \"items\": [],\n  \"count\": 0,\n  \"nextId\": null,\n  \"nextUrl\": null\n}\n</code></pre> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows an arbitrary request and response of fetching a page. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-MSSQL/","title":"MSSQL","text":"<p>In this lab, we will practice working with the server-side programming features of Microsoft SQL Server.</p>"},{"location":"Lab-MSSQL/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>Microsoft SQL Server<ul> <li>The free Express version is sufficient, or you may also use localdb installed with Visual Studio</li> <li>A Linux version is also available.</li> <li>On macOS, you can use Docker.</li> </ul> </li> <li>SQL Server Management Studio, or you may also use the platform-independent Azure Data Studio is</li> <li>Database initialization script: mssql.sql</li> <li>GitHub account and a git client</li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Using Microsoft SQL Server: description</li> <li>The schema of the database</li> <li>Microsoft SQL Server server-side programming and the SQL language<ul> <li>Check the materials of Data-driven systems including the seminars</li> </ul> </li> </ul>"},{"location":"Lab-MSSQL/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-MSSQL/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>Password in the labs</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-MSSQL/#create-the-database","title":"Create the database","text":"<ol> <li> <p>Connect to Microsoft SQL Server using SQL Server Management Studio. Start Management Studio and use the following connection details:</p> <ul> <li>Server name: <code>(localdb)\\mssqllocaldb</code> or <code>.\\sqlexpress</code> (which is short for: <code>localhost\\sqlexpress</code>)</li> <li>Authentication: <code>Windows authentication</code></li> </ul> </li> <li> <p>Create a new database (if it does not exist yet). The name should be your Neptun code: in Object Explorer right-click Databases and choose Create Database.</p> <p>IMPORTANT</p> <p>The name of the database must be your Neptun code. You will need to submit screenshots that display the database name this way!</p> </li> <li> <p>Create the sample database by executing the initializer script Open a new Query window, paste the script into the window, then execute it. Make sure to select the correct database in the toolbar dropdown.</p> <p></p> </li> <li> <p>Verify that the tables are created. If the Tables folder was open before, you need to refresh it.</p> <p>.</p> </li> </ol>"},{"location":"Lab-MSSQL/#exercise-1-category-view-and-data-insertion","title":"Exercise 1: Category view and data insertion","text":"<p>You can earn 8 points with the completion of this exercise.</p>"},{"location":"Lab-MSSQL/#create-a-view","title":"Create a view","text":"<p>Create a new <code>CategoryWithParent</code> view that lists the <code>Category</code> table's contents as follows. It should have two columns: the <code>Name</code> of the category and the name of the parent category (or null if it does not exist).</p> <p>Open a new Query window. Make sure to select the correct database. Create the view by executing the T-SQL command below.</p> <pre><code>create view CategoryWithParent\nas\nselect c.Name CategoryName, p.Name ParentCategoryName\nfrom Category c\nleft outer join Category p on c.ParentCategoryId = p.ID\n</code></pre> <p>Check the contents of the view!</p> <p></p>"},{"location":"Lab-MSSQL/#insert-via-the-view","title":"Insert via the view","text":"<p>Create a trigger with the name <code>InsertCategoryWithParent</code> that allows inserting a new category through the view (that is, by specifying the category name and the parent category name). It is not necessary to set a parent category. Still, if it is specified and there is no category with the provided name, an error should be raised, and the operation aborted.</p> <p>You will need an instead of trigger that allows us to define how to insert the data. The skeleton of the trigger is provided below.</p> <pre><code>create trigger InsertCategoryWithParent -- name of the trigger\non CategoryWithParent -- name of the view\ninstead of insert    -- trigger code executed insted of insert\nas\nbegin\n  declare @newname nvarchar(255) -- variables used below\n  declare @parentname nvarchar(255)\n\n  -- using a cursor to navigate the inserted table\n  declare ic cursor for select * from inserted\n  open ic\n  -- standard way of managing a cursor\n  fetch next from ic into @newname, @parentname\n  while @@FETCH_STATUS = 0\n  begin\n    -- check the received values available in the variables\n    -- find the id of the parent, if specified\n    -- throw error if anything is not right\n    -- or insert the record into the Category table\n    fetch next from ic into @newname, @parentname\n  end\n\n  close ic -- finish cursor usage\n  deallocate ic\nend\n</code></pre> <ol> <li> <p>Finish this trigger by completing the code in the cycle.</p> <ul> <li> <p>If a parent category name is provided, check whether any category with the same name as <code>@parentname</code> exists.</p> </li> <li> <p>If not, raise an error and abort the trigger.</p> </li> <li> <p>If everything is fine, insert the data into the <code>Category</code> table (and not the view... since the view does not store any data, hence this trigger).</p> </li> </ul> <p>SUBMISSION</p> <p>Submit the code of the trigger in file <code>f1-trigger.sql</code>. The file should contain a single <code>create trigger</code> statement! Do not add <code>[use]</code> or <code>go</code> commands to the file! The correct behavior earns you 4 points.</p> </li> <li> <p>Verify the correct behavior of the trigger! Write an insert statement that successfully inserts a new category record through the view. Then write an insert statement that fails.</p> <p>Suppose that the database is in its initial state: the categories in the table are the ones included in the initializer script. The two tests should not depend on each other. Both shall produce the expected output regardless of whether the other was executed before!</p> <p>Use simple names</p> <p>It is recommended to use names (i.e., category names) that contain no special characters. Incorrect encoding of the SQL file might result in incorrect behavior otherwise. E.g., you may use the LEGO category as a known existing category.</p> <p>SUBMISSION</p> <p>Write the test insert statements into files <code>f1-test-ok.sql</code> and <code>f1-test-error.sql</code>. Each file shall contain a single <code>insert</code> statement! They should not include any <code>use</code> or <code>go</code> commands. Each file can earn you 2 points.</p> </li> </ol>"},{"location":"Lab-MSSQL/#exercise-2-validating-invoices","title":"Exercise 2: Validating invoices","text":"<p>You can earn 6 points with the completion of this exercise.</p>"},{"location":"Lab-MSSQL/#stored-procedure","title":"Stored procedure","text":"<p>Create a store procedure with the name <code>CheckInvoice</code> that expects an <code>int</code> input parameter with the name <code>@invoiceid</code>.</p> <ul> <li>The procedure shall check the invoice corresponding to the provided id: check each <code>InvoiceItem</code> whether the <code>Amount</code> equals the amount on the corresponding <code>OrderItem</code>. (<code>InvoiceItem</code> directly references the corresponding <code>OrderItem</code>.)</li> <li>If there are any differences, print the amount values in both, and print the related product name as follows: <code>Error: Ball (invoice 5 order 6)</code></li> <li>The procedure should print any message only if an error was found. Do not leave test output in the submitted code!</li> <li>The procedure return value shall be an <code>int</code> equal to 0 when no discrepancies were found and 1 in case one was identified. This value should be <code>return</code>-ed at the end of the procedure (do not use an <code>output</code> parameter).</li> </ul> <p>Use the <code>print</code> command for output as follows: <code>PRINT 'Text' + @variable + 'Text'</code> Any variable you print must be of character type. To convert a number to characters use: <code>convert(varchar(5), @variable)</code>, e.g. <code>PRINT 'Text' + convert(varchar(5), @variable)</code></p> <p>SUBMISSION</p> <p>Write the stored procedure code in file <code>f2-procedure.sql</code>. The file should contain a single <code>create proc</code> statement! The correct behavior earns you 4 points. Partially incorrect behavior earns you partial points.</p>"},{"location":"Lab-MSSQL/#validate-all-invoices","title":"Validate all invoices","text":"<p>Write T-SQL code that calls the procedure on all invoices. You should use a cursor to iterate all invoices.</p> <p>The code shall print the ID of the invoice (e.g., <code>InvoiceID: 12</code>) before checking an invoice. If an invoice contains no discrepancies, print 'Invoice ok' before moving on to the next one. Check the Messages pane under the query window for the messages.</p> <p>Invoking a stored procedure</p> <p>Invoking a stored procedure is performed with the <code>exec</code> statement:</p> <pre><code>declare @checkresult int\nexec @checkresult = CheckInvoice 123\n</code></pre> <p>Verify the correct behavior of this code. You might need to alter a few records in the database to have any discrepancies. (The testing code does not need to be submitted.)</p> <p>SUBMISSION</p> <p>Submit the code checking all invoices in file <code>f2-check-all.sql</code>. The file shall contain the T-SQL code. It should not include the stored procedure nor any <code>use</code> or <code>go</code> commands. You can earn 2 points with the completion of this task.</p> <p>SUBMISSION</p> <p>Create a screenshot of the output when a discrepancy was found. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall display the database name (which should be your Neptun code) in the Object Explorer window and the output messages too.</p>"},{"location":"Lab-MSSQL/#exercise-3-denormalize-invoices","title":"Exercise 3: Denormalize invoices","text":"<p>You can earn 6 points with the completion of this exercise.</p>"},{"location":"Lab-MSSQL/#new-column","title":"New column","text":"<p>Update the <code>Invoice</code> table by adding a new <code>ItemCount</code> integer column that contains the number of items on the invoice (regarding the <code>InvoiceItems</code> records associated with each invoice).</p> <p>SUBMISSION</p> <p>The code for adding the column shall be submitted in file <code>f3-column.sql</code>. The file shall contain a single <code>alter table</code> statement and should not include any <code>use</code> or <code>go</code> commands. You can earn 1 point with the completion of this task. This task is a prerequisite for the next ones.</p> <p>Write T-SQL code block to fill this new column with the correct values.</p> <p>If an <code>Invoice</code> has an associated item with 2 red beach balls and another item with 1 tennis racket, then there are 3 items on this invoice. Note that it is invoices (and not orders) you have to consider here!</p> <p>SUBMISSION</p> <p>Submit the code in file <code>f3-fill.sql</code>. The file shall contain a single T-SQL code block. Do not use stored procedures or triggers here, and the code should not have any <code>[use]</code> or <code>go</code> statements either. You can earn 1 point with the completion of this task.</p>"},{"location":"Lab-MSSQL/#maintaining-the-correct-value","title":"Maintaining the correct value","text":"<p>Create a trigger with the name <code>InvoiceItemCountMaintenance</code> that ensures the value in this new column is updated when an invoice or related items are updated. The trigger must be efficient! Re-calculating the number of items is not an acceptable solution. The trigger must also work correctly when multiple items are updated at the same time.</p> <p>Tip</p> <p>The trigger shall be on the <code>InvoiceItem</code> table despite the new column being in the <code>Invoice</code> table.</p> <p>Important</p> <p>Do not forget that triggers are executed per statement and not for each row; that is, your trigger will need to handle multiple changes in the implicit tables! The <code>inserted</code> and <code>deleted</code> implicit variables are tables must be treated as such.</p> <p>SUBMISSION</p> <p>Submit the code of the trigger in file <code>f3-trigger.sql</code>. The file shall contain a single <code>create trigger</code> statement and should not contain any <code>use</code> or <code>go</code> commands. The correct behavior earns you 4 points. Partially incorrect behavior earns you partial points.</p> <p>Verify the correct behavior of the trigger! The test code need not be submitted, but make sure to verify the behavior. Make sure to check the case when multiple records are modified with a single statement, e.g., execute an <code>update</code> without a <code>where</code> condition).</p> <p>SUBMISSION</p> <p>Create a screenshot displaying the contents of the table <code>Invoice</code> with the <code>ItemCount</code> column and its correctly filled values. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall display the database name (which should be your Neptun code) in the Object Explorer window and the contents of the <code>Invoice</code> table. The screenshot is required to earn the points of this part of the exercise.</p>"},{"location":"Lab-MSSQL/#exercise-4-optional-exercise","title":"Exercise 4: Optional exercise","text":"<p>You can earn an additional +3 points with the completion of this exercise. (In the evaluation, you will see the text \"imsc\" in the exercise title; this is meant for the Hungarian students. Please ignore that.)</p> <p>Query the <code>Categories</code> so that you get the following outcome:</p> Name Count Rank Building items 3 1 Months 0-6 2 2 DUPLO 1 3 LEGO 1 4 Months 18-24 1 5 Months 6-18 1 6 Play house 1 7 <p>The first column is the name of the category. The second column contains the number of products in this category. And finally, the third is the rank of the results based on the number of products in the category, descending; if the counts are equal, then the order is based on the name of the category ascending. The ranking should be continuous without gaps, and the final results should be ordered by this rank. The query should be a single statement. The name of the columns in the result set should be the ones you see above.</p> <p>Tip</p> <p>The fact that the third column is called \"rank\" should give you an idea.</p> <p>SUBMISSION</p> <p>Submit the query in file <code>f4.sql</code>. The file shall contain a single <code>select</code> query without any <code>use</code> or <code>go</code> commands.</p> <p>SUBMISSION</p> <p>Create a screenshot that shows the outcome of the query. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall display the database name (which should be your Neptun code) in the Object Explorer window and the query results. The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/","title":"MongoDB","text":"<p>In this lab, we will work with the MongoDB NoSQL database and the Mongo C# driver.</p>"},{"location":"Lab-MongoDB/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li> <p>MongoDB Community Server (download)</p> <ul> <li> <p>Without installing you can run the server with the following command using Docker:</p> <pre><code>docker run --name swlab1-mongo -p 27017:27017 -d mongo\n</code></pre> </li> </ul> </li> <li> <p>VSCode</p> <ul> <li>MongoDB for VSCode extension</li> </ul> </li> <li>Sample database initialization script: (mongo.js)</li> <li>GitHub account and a git client</li> <li>Microsoft Visual Studio 2022 with the settings here<ul> <li>When using Linux or macOS, you can use Visual Studio Code, the .NET SDK, and dotnet CLI.</li> </ul> </li> <li> <p>.NET 8.0 SDK</p> <p>.NET 8.0</p> <p>Mind the version! You need .NET SDK version 8.0 to solve these exercises.</p> <p>On Windows it might already be installed along with Visual Studio (see here how to check it); if not, use the link above to install (the SDK and not the runtime). You need to install it manually when using Linux or macOS.</p> </li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>MongoDB database system and the C# driver<ul> <li>Check the materials of Data-driven systems including the seminars</li> </ul> </li> <li>Official Microsoft tutorial for WebApi using MongoDB<ul> <li>We will not be creating a WebApi in this lab, but the Mongo part is the same.</li> </ul> </li> </ul>"},{"location":"Lab-MongoDB/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-MongoDB/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>Password in the labs</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-MongoDB/#create-the-database","title":"Create the database","text":"<p>Follow the steps in the seminar material to start the database server and initialize the database.</p>"},{"location":"Lab-MongoDB/#exercise-1-listing-and-modifying-products","title":"Exercise 1: Listing and modifying products","text":"<p>This exercise will implement CRUD (create, retrieve, update, delete) operations for <code>Product</code> entities.</p>"},{"location":"Lab-MongoDB/#open-the-visual-studio-solution","title":"Open the Visual Studio solution","text":"<p>Open the Visual Studio solution (the <code>.sln</code>) file in the checked-out repository. If Visual Studio tells you that the project is not supported, you need to install a missing component (see here).</p> <p>Do NOT upgrade any version</p> <p>Do not upgrade the project, the .NET version, or any NuGet package! If you see such a question, always choose no!</p> <p>You will need to work in class <code>Dal.Repository</code>! You can make changes to this class as long as the source code complies, the repository implements interface <code>mongolab.DAL.IRepository</code>, and the constructor accepts a single <code>IMongoDatabase</code> parameter.</p> <p>The database access is configured in class <code>Dal.MongoConnectionConfig</code>. If needed, you can change the database name in this file.</p> <p>Other parts of the application should NOT be modified!</p> <p>Razor Pages</p> <p>The web application is a so-called Razor Pages ASP.NET Core project. It includes a presentation layer rendered on the server using C# code and the Razor template. (You do not need to concern yourself with the UI.)</p>"},{"location":"Lab-MongoDB/#start-the-web-app","title":"Start the web app","text":"<p>Check if the web application starts.</p> <ol> <li> <p>Compile the code and start in Visual Studio.</p> </li> <li> <p>Open URL http://localhost:5000/ in a browser.</p> </li> </ol> <p>If everything was successful, you should see a page with links where you will be able to test your code. (The links will not work as the data access layer is not implemented yet.)</p>"},{"location":"Lab-MongoDB/#display-the-neptun-code-on-the-web-page","title":"Display the Neptun code on the web page","text":"<p>You will need to create screenshots that display your Neptun code.</p> <ol> <li> <p>Open file <code>Pages\\Shared\\_Layout.cshtml</code>. In the middle of the file, find the following section, and edit your Neptun code.</p> <pre><code>&lt;div class=\"container body-content\"&gt;\n    @RenderBody()\n    &lt;hr /&gt;\n    &lt;footer&gt;\n        &lt;p&gt;@ViewData[\"Title\"] - NEPTUN&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/div&gt;\n</code></pre> </li> <li> <p>Compile the code and start the app again, then check the starting page. You should see the Neptune code at the bottom of the page.</p> <p></p> </li> </ol> <p>IMPORTANT</p> <p>The Neptun code is a mandatory requirement in the footer!</p>"},{"location":"Lab-MongoDB/#listing","title":"Listing","text":"<ol> <li> <p>First, you will need a way to access the <code>products</code> collection from C#. Create and initialize a new variable that represents the collection in class <code>Repository</code>. Use the injected <code>IMongoDatabase</code> variable to get the collection:</p> <pre><code>private readonly IMongoCollection&lt;Entities.Product&gt; _productCollection;\n\npublic Repository(IMongoDatabase database)\n{\n    this._productCollection = database.GetCollection&lt;Entities.Product&gt;(\"products\");\n}\n</code></pre> </li> <li> <p>You can use <code>_productCollection</code> to access the database's product records from now on. Let us start by implementing <code>ListProducts</code>. This will require two steps: first, to query the data from the database, then transform each record to an instance of <code>Models.Product</code>.</p> <p>The query is as follows:</p> <pre><code>var dbProducts = _productCollection\n    .Find(_ =&gt; true) // listing all products hence an empty filter\n    .ToList();\n</code></pre> <p>All items are then transformed.</p> <pre><code>return dbProducts\n    .Select(t =&gt; new Product\n    {\n        Id = t.Id.ToString(),\n        Name = t.Name,\n        Price = t.Price,\n        Stock = t.Stock\n    })\n    .ToList();\n</code></pre> </li> <li> <p>The implementation of <code>FindProduct(string id)</code> is similar, except for querying a single record by matching the <code>Id</code>. Pay attention to the fact that the <code>Id</code> is received as a string, but it needs converting to <code>ObjectId</code>.</p> <p>The transformation to the model remains identical. However, we should also handle when there is no matching record found and return a <code>null</code> value in this case (without converting anything to a model).</p> <p>The query is as follows:</p> <pre><code>var dbProduct = _productCollection\n    .Find(t =&gt; t.Id == ObjectId.Parse(id))\n    .SingleOrDefault();\n// ... model conversion\n</code></pre> <p>Note how the filter expression looks like! Also, note how the <code>ToList</code> is replaced with a <code>SingleOrDefault</code> call. This returns either the first (and single) element in the result set or <code>null</code> when there is none. This is a generic way of querying a single record from the database. You will need to write a similar code in further exercises.</p> <p>The conversion/transformation code is already given; however, we should prepare to handle when <code>dbProduct</code> is <code>null</code>. Instead of conversion, we should return <code>null</code> then.</p> </li> <li> <p>Test the behavior of these queries! Start the web application and go to http://localhost:5000 in a browser. Click <code>Products</code> to list the data from the database. If you click on <code>Details</code> it will show the details of the selected product.</p> </li> </ol> <p>If you do not see any product</p> <p>If you see no items on this page, but there is no error, it is most likely due to a misconfigured database access. MongoDB will not return an error if the specified database does not exist. See the instructions for changing the connection details above.</p>"},{"location":"Lab-MongoDB/#creation","title":"Creation","text":"<ol> <li> <p>Implement the method <code>InsertProduct(Product product)</code>. The input is an instance of <code>Models.Product</code> that collects the information specified on the UI.</p> </li> <li> <p>To create a new product, we will first create a new database entity (in memory first). This is an instance of class <code>Entities.Product</code>. There is no need to set the <code>Id</code> - the database will generate it. <code>Name</code>, <code>Price</code> and <code>Stock</code> are provided by the user. What is left is <code>Vat</code> and <code>CategoryId</code>. We should hard-code values here: create a new VAT entity and find a random category using Studio 3T and copy the <code>_id</code> value.</p> <pre><code>var dbProduct = new Entities.Product\n{\n    Name = product.Name,\n    Price = product.Price,\n    Stock = product.Stock,\n    Vat = new Entities.Vat\n    {\n        Name = \"General\",\n        Percentage = 20\n    },\n    CategoryId = ObjectId.Parse(\"5d7e4370cffa8e1030fd2d99\"),\n};\n_productCollection.InsertOne(dbProduct);\n</code></pre> <p>Once the database entity is ready, use <code>InsertOne</code> to add it to the database.</p> </li> <li> <p>To test your code, start the application and click the <code>Add new product</code> link on the products page. You will need to fill in the necessary data, and then the presentation layer will call your code.</p> </li> </ol>"},{"location":"Lab-MongoDB/#delete","title":"Delete","text":"<ol> <li> <p>Implement method <code>DeleteProduct(string id)</code>. Use <code>DeleteOne</code> on the collection to delete the record. You will need a filter expression here to find the matching record similarly to how it was done in <code>FindProduct(string id)</code>.</p> </li> <li> <p>Test the functionality using the web application by clicking the <code>Delete</code> link next to a product.</p> </li> </ol>"},{"location":"Lab-MongoDB/#modification","title":"Modification","text":"<ol> <li> <p>We will implement the method <code>bool SellProduct(string id, int amount)</code> as a modification operation. The method shall return <code>true</code> if a record with a matching <code>id</code> is found, and there are at least <code>amount</code> pieces in stock. If the product is not found or there is not enough in stock return <code>false</code>.</p> </li> <li> <p>Using the atomicity guarantees of MongoDB, we will perform the changes in a single step. A filter will be used to find both the <code>id</code> and check if there are enough items in stock. A modification will decrease the stock only if the filter is matched.</p> <pre><code>var result = _productCollection.UpdateOne(\n    filter: t =&gt; t.Id == ObjectId.Parse(id) &amp;&amp; t.Stock &gt;= amount,\n    update: Builders&lt;Entities.Product&gt;.Update.Inc(t =&gt; t.Stock, -amount),\n    options: new UpdateOptions { IsUpsert = false });\n</code></pre> <p>Note that the <code>UpdateOptions</code> is used to signal that we do NOT want as upsert operation; instead, we want the operation to do nothing when the filter is not matched.</p> <p>The modification is assembled using <code>Update</code> in <code>Builders</code>. Here we want to decrease the stock value with <code>amount</code> (which is, effectively, an increase with <code>-amount</code>).</p> <p>We can determine what happened based on the <code>result</code> returned by the update operation. If the result indicates that the filter matched a record and the modification was performed, return <code>true</code>. Otherwise, return <code>false</code>.</p> <pre><code>return result.MatchedCount &gt; 0;\n</code></pre> </li> <li> <p>Test the functionality using the web application by clicking the <code>Buy</code> link next to a product. Verify the behavior when you enter a too large amount!</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the products after successfully adding at least one new product. Save the screenshot as <code>f1.png</code> and submit it with the other files of the solution. The screenshot shall display the list of products. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-2-listing-categories","title":"Exercise 2: Listing categories","text":"<p>We will be listing available categories here with the number of products in each category. We will need an aggregation pipeline here. Continue working in class <code>Dal.Repository</code>.</p> <p>The method you should implement is <code>IList&lt;Category&gt; ListCategories()</code>. The method shall return all categories. Class <code>Models.Category</code> has 3 members.</p> <ul> <li><code>Name</code>: the name of the category</li> <li><code>ParentCategoryName</code>: the name of the parent category. If there is no parent, the value should be <code>null</code>.</li> <li><code>NumberOfProducts</code>: number of products in this category. If there are no products, the value should be 0.</li> </ul> <p>The outline of the solution is as follows.</p> <ol> <li> <p>Create and initialize a new <code>_productCollection</code> similar to how <code>_categoryCollection</code> is initialized. The name of the collection is <code>categories</code> - you can verify this using Studio 3T.</p> </li> <li> <p><code>ListCategories()</code> should first query all categories. Perform this similarly to how it was done in the previous exercise. Store the result set in variable <code>dbCategories</code>.</p> </li> <li> <p>Query the number of products associated with each category (<code>Product.CategoryId</code>). Use an aggregation pipeline and a <code>$group</code> step as follows.</p> <pre><code>var productCounts = _productCollection\n    .Aggregate()\n    .Group(t =&gt; t.CategoryID, g =&gt; new { CategoryID = g.Key, NumberOfProducts = g.Count() })\n    .ToList();\n</code></pre> <p>This query yields a list where each item has a <code>CategoryID</code> and the number of associated products.</p> </li> <li> <p>We have all information we need: all categories (including the parents) and the number of products for each. The final step is to \"merge\" the results in C# code.</p> <pre><code>return dbCategories\n.Select(k =&gt; new Category\n   {\n       Name = k.Name,\n       ParentCategoryName = k.ParentCategoryId.HasValue\n           ? dbCategories.Single(p =&gt; p.Id == k.ParentCategoryId.Value).Name\n           : null,\n       NumberOfProducts = productCounts.SingleOrDefault(pc =&gt; pc.CategoryID == k.Id)?.NumberOfProducts ?? 0\n   })\n   .ToList();\n</code></pre> <p>As seen above, this is performed using LINQ.</p> <p>Join with MongoDB</p> <p>This is not the only solution to \"join\" collections in MongoDB. Although there is no <code>join</code> operation, there are ways to query data across collections. Instead of doing this in MongoDB, we do the merging in C# as above. This would not be good if the data set were large. Also, if there were filtering involved, the code above would be much more complicated.</p> </li> <li> <p>Use the <code>Categories</code> link of the website to test your solution. This will list the data provided by your code in a tabular format. You can use the <code>Add new product</code> functionality from before to create new products. This must result in an increase in the number of products in one of the categories. (Remember that inserting the product hard-coded a category ID.)</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the categories. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall display the list of categories. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-3-querying-and-modifying-orders","title":"Exercise 3: Querying and modifying orders","text":"<p>In this exercise, we will implement CRUD (create, retrieve, update, delete) operations for <code>Order</code> entities. This exercise is similar to the previous one; feel free to look back to the solutions of that exercise.</p> <p>The properties of <code>Model.Order</code> are:</p> <ul> <li><code>Id</code>: the <code>Id</code> of the database serialized using <code>ToString</code></li> <li><code>Date</code>, <code>Deadline</code>, <code>Status</code>: taken from the database directly</li> <li><code>PaymentMethod</code>: taken from the <code>Method</code> field of the <code>PaymentMethod</code> complex entity</li> <li><code>Total</code>: the cumulative sum of the product of <code>Amount</code> and <code>Price</code> for all items associated with this order (<code>OrderItems</code>)</li> </ul> <p>You will need to implement the management methods related to orders: <code>ListOrders</code>, <code>FindOrder</code>, <code>InsertOrder</code>, <code>DeleteOrder</code>, and <code>UpdateOrder</code>.</p> <p>Before starting the tasks below, do not forget to add and initialize an <code>_orderCollection</code> in the repository class similar to the other one.</p>"},{"location":"Lab-MongoDB/#listing_1","title":"Listing","text":"<ol> <li> <p>Method <code>ListOrders</code> receives a <code>string status</code> parameter. If this value is empty or <code>null</code> (see: <code>string.IsNullOrEmpty</code>) list all orders. Otherwise, list orders where the <code>Status</code> field is identical to the <code>status</code> received as a parameter.</p> </li> <li> <p>Method <code>FindOrder</code> returns the data of a single order identified by <code>string id</code>. If no record with the same <code>ID</code> exists, this method shall return <code>null</code>.</p> </li> </ol>"},{"location":"Lab-MongoDB/#creation_1","title":"Creation","text":"<ol> <li> <p>Implement the method <code>InsertOrder</code>. The following information is provided to create the new order: <code>Order order</code>, <code>Product product</code>, and <code>int amount</code>.</p> </li> <li> <p>You need the set the following information in the database entity:</p> <ul> <li><code>CustomerId</code>, <code>SiteId</code>: find a chosen <code>Customer</code> in the database and copy the values from this record from fields <code>_id</code> and <code>mainSiteId</code>. Hard-wire these values in code.</li> <li><code>Date</code>, <code>Deadline</code>, <code>Status</code>: take these values from the value received as <code>order</code> parameter</li> <li><code>PaymentMethod</code>: create a new instance of <code>PaymentMethod</code>. The <code>Method</code> should be <code>PaymentMethod</code> from the object received through the <code>order</code> parameter. Leave <code>Deadline</code> as <code>null</code>.</li> <li><code>OrderItems</code>: create a single item here with the following data:<ul> <li><code>ProductId</code> and <code>Price</code>: take the values from the parameter <code>product</code></li> <li><code>Amount</code>: copy value from the method parameter <code>amount</code></li> <li><code>Status</code>: equals to the <code>Status</code> field of parameter <code>order</code></li> </ul> </li> <li>other fields (related to invoicing) should be left as <code>null</code>!</li> </ul> </li> </ol>"},{"location":"Lab-MongoDB/#delete_1","title":"Delete","text":"<p><code>DeleteOrder</code> should delete the record specified by the <code>Id</code>.</p>"},{"location":"Lab-MongoDB/#modification_1","title":"Modification","text":"<p>When updating the record in <code>UpdateOrder</code>, only update the information present in <code>Models.Order</code>: <code>Date</code>, <code>Deadline</code>, <code>Status</code>, and <code>PaymentMethod</code>. Ignore the value <code>Total</code>; it does not need to be considered in this context.</p> <p>Hint</p> <p>You can combine multiple updates using <code>Builders&lt;Entities.Order&gt;.Update.Combine</code>.</p> <p>Keep in mind that the <code>IsUpsert</code> property should be set to <code>false</code> in the update!</p> <p>The method should return <code>true</code> if there were a record with a matching <code>ID</code>.</p>"},{"location":"Lab-MongoDB/#testing","title":"Testing","text":"<p>You can test the functionalities using the <code>Orders</code> link in the test web app. Verify the behavior of <code>Filter</code>, <code>Add new order</code>, <code>Edit</code>, <code>Details</code>, and <code>Delete</code> too!</p> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the orders after successfully adding at least one new order. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall display the list of orders. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-4-listing-customers","title":"Exercise 4: Listing customers","text":"<p>We will list the customers in this exercise, along with the cumulative value of their orders. This will be similar to exercise 2: we will use aggregation and merging in C# code.</p> <p>The method to implement is <code>IList&lt;Customer&gt; ListCustomers()</code>. The method shall return every customer. The properties of <code>Model.Customer</code> are:</p> <ul> <li><code>Name</code>: the name of the customer</li> <li><code>ZipCode</code>, <code>City</code>, <code>Street</code>: the address fields of the main site of the customer</li> <li><code>TotalOrders</code>: the cumulative total of all orders of the customer. You have to aggregate the price*amount for each order of a customer to get this total. If a particular customer has no orders, this value shall be <code>null</code>.</li> </ul> <p>Follow these steps to solve this exercise:</p> <ol> <li> <p>Create and initialize the <code>_customerCollection</code>.</p> </li> <li> <p>List all customers. The customer entity has the list of <code>Sites</code>; the main site is the item <code>MainSiteId</code> points to. Use this value to find the main in among the list.</p> </li> <li> <p>In the collection of the orders, use an aggregation pipeline to calculate the total of all orders for each <code>CustomerId</code>.</p> </li> <li> <p>Finally, you need the \"merge\" the two result sets. Every customer has a main site; however, not all of them have orders (in which case <code>TotalOrders</code> shall be <code>null</code>).</p> </li> <li> <p>Use the <code>Customers</code> link of the website to test your solution. This will list the data provided by your code in a tabular format. You can use the <code>Add new order</code> functionality from before to create new orders. This must result in an increase in the total for one of the customers.</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the customers. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall display the list of customers. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-5-optional-exercise","title":"Exercise 5: Optional exercise","text":"<p>(In the evaluation, you will see the text \"imsc\" in the exercise title; this is meant for the Hungarian students. Please ignore that.)</p> <p>We will group the orders in this exercise by date. We would like to see how our company performs by comparing the sales across time. We will use a <code>$bucket</code> aggregation.</p>"},{"location":"Lab-MongoDB/#requirements","title":"Requirements","text":"<p>The method to implement is <code>OrderGroups GroupOrders(int groupsCount)</code>. This operation shall group the orders into <code>groupsCount</code> equal date ranges. The return value contains two values:</p> <ul> <li><code>IList&lt;DateTime&gt; Thresholds</code>: The threshold dates of the date ranges.<ul> <li>The lower bound of the interval is inclusive, while the upper bound is exclusive.</li> <li>When having <code>n</code> intervals, the <code>Thresholds</code> list has <code>n + 1</code> items</li> <li>E.g.: Let the <code>Thresholds</code> be <code>a, b, c, d</code>; the intervals shall then be: <code>[a, b[</code>, <code>[b, c[</code> and <code>[c, d[</code>.</li> </ul> </li> <li><code>IList&lt;OrderGroup&gt; Groups</code>: The groups that fall into each date range. The properties of <code>OrderGroup</code> are:<ul> <li><code>Date</code>: The start date of the interval. E.g., for the interval <code>[a, b[</code> the value is<code>a</code>.</li> <li><code>Pieces</code>: The number of orders within the interval.</li> <li><code>Total</code>: The cumulative sum of the values of orders within this interval.</li> </ul> </li> </ul> <p>Further requirements:</p> <ol> <li>There should be exactly <code>groupsCount</code> intervals.<ul> <li>The number of items in <code>Thresholds</code> will be exactly <code>groupsCount + 1</code>.</li> <li>The number of items in <code>Groups</code> is at most <code>groupsCount</code> \u2014 no need for an item for intervals with no orders</li> </ul> </li> <li>The lower boundary should be the earliest date in the database</li> <li>The upper boundary should be the latest date in the database + 1 hour<ul> <li>This is needed because the upper boundary is exclusive. It ensures that every item in the database falls into one of the intervals.</li> <li>Tip: add one hour to a date: <code>date.AddHours(1)</code>.</li> </ul> </li> <li>The intervals should be of equal size<ul> <li>Tip: C# has built-in support for date arithmetic using dates (<code>DateTime</code>) and duration (<code>TimeSpan</code>) classes.</li> </ul> </li> </ol> <p>You can assume the following:</p> <ul> <li>All orders in the database have <code>Date</code> values even though the type is nullable (<code>DateTime?</code>).<ul> <li>You can use <code>date.Value</code> to get the date without checking <code>date.HasValue</code>.</li> </ul> </li> <li><code>groupsCount</code> is a positive integer greater than or equal to 1.</li> </ul>"},{"location":"Lab-MongoDB/#draft-solution","title":"Draft solution","text":"<ol> <li> <p>Get the earliest and latest order dates from the database.</p> <ul> <li>Tip: You can execute two queries to get the values or a single aggregation.</li> </ul> </li> <li> <p>Calculate the interval boundaries according to the requirements.</p> <ul> <li>This will yield the <code>Thresholds</code> list for the return value.</li> </ul> </li> <li> <p>Execute a <code>$bucket</code> aggregation on the orders collection. See the documentation here.</p> <ul> <li>the <code>groupBy</code> expression will be the date of the order</li> <li><code>boundaries</code> expects the values as stated in the requirements; the list assembled in the previous step will work just fine</li> <li><code>output</code> should calculate the count and total value</li> </ul> <p>Tip</p> <p>If you receive an error message <code>\"Element '...' does not match any field or property of class...\"</code> then in the <code>output</code> expression, change every property to lowercase (e.g., <code>Pieces</code> -&gt; <code>pieces</code>). It seems that the Mongo C# driver does not perform the required name transformations here.</p> </li> <li> <p>The <code>$bucket</code> aggregation will yield the intervals according to the specification. You will only need to transform the results into instances of <code>OrderGroup</code> and produce the return value.</p> </li> <li> <p>Use the <code>Group orders</code> link of the website to test your solution. A diagram will display the calculated information. Test your solution by changing the number of groups and adding orders in the past using the previously implemented <code>Add new order</code> functionality.</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page displaying the diagram. Save the screenshot as <code>f5.png</code> and submit it with the other files of the solution. The screenshot shall show both diagrams (you may need to zoom out in the browser to fit them). Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-PowerBI/","title":"Power BI","text":"<p>During the lab, we get acquainted with a new tool called Microsoft Power BI.</p> <p>Power BI is a powerful business analytics tool developed by Microsoft. It allows users to visualize their data, share insights across their organization, and embed them in an app or website. With Power BI, you can connect to multiple data sources, transform and model your data, and create interactive reports and dashboards that are easy to understand and share. It's particularly useful for turning raw data into actionable insights.</p> <p>Here's a quick overview of its main features:</p> <ul> <li>Data Connectivity: Connect to a wide range of data sources, including Excel, databases, cloud services, and more.</li> <li>Data Transformation: Clean and transform your data using Power Query Editor.</li> <li>Data Modeling: Create relationships between different data sets and build complex data models.</li> <li>Visualizations: Use a variety of visual elements like charts, graphs, and maps to represent your data visually.</li> <li>Dashboards: Combine multiple reports into interactive dashboards that provide a comprehensive view of your data.</li> <li>Sharing &amp; Collaboration: Share your reports and dashboards with others, collaborate in real-time, and embed them in your apps or websites.</li> </ul> <p>Our task to create interactive reports which are working from Excel data sources to visualize data in grids and charts with filtering support.</p>"},{"location":"Lab-PowerBI/#prerequisites-preparation","title":"Prerequisites, preparation","text":"<p>Tools needed to perform the lab:</p> <ul> <li>Windows</li> <li>Power BI Desktop</li> <li>GitHub account and a git client</li> <li>Microsoft365 account (***@edu.bme.hu)</li> </ul> <p>Auxiliary materials and preparation materials that can be used to perform the laboratory:</p> <ul> <li>Power BI platform: documentation</li> </ul>"},{"location":"Lab-PowerBI/#preparation","title":"Preparation","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-PowerBI/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-PowerBI/#free-power-bi-registration","title":"Free Power BI registration","text":"<ol> <li> <p>We will use the free subscription level of Power BI. Use of this is subject to pre-registration. Please visit Power BI's homepage login with your ***@edu.bme.hu email address and click on the free registration button. Upon successful registration, you will receive the following message:</p> <p></p> </li> <li> <p>Registration takes us to Power BI's Website. Let's try it out.</p> </li> </ol>"},{"location":"Lab-PowerBI/#install-powerbi-desktop","title":"Install PowerBI Desktop","text":"<p>We will use the Power BI Desktop application to create Power BI reports. It probably needs to be installed on your own device.</p> <ol> <li> <p>Make sure that you have the Power BI Desktop app installed on your computer, and if you do, you don't need to follow the steps below.</p> <p>Power BI Desktop is the most convenient to install from the Microsoft Store. This is also practical in laboratory machines because it does not require administrative privileges. You can also choose the downloadable installer for your machine.</p> </li> <li> <p>Open Power Bi Desktop App in the Microsoft Store and choose installation! You do not need to log in to the Store to do the installation.</p> <p></p> </li> </ol>"},{"location":"Lab-PowerBI/#1-task-spreadsheet-report-5-points","title":"1. Task: Spreadsheet Report (5 points)","text":"<p>Generating Power BI reports usually follows a typical workflow with the following steps:</p> <p></p> <p>In the process, we will use the Power BI Desktop application to design the reports, while publishing and sharing the reports will be done with Power BI Service.</p>"},{"location":"Lab-PowerBI/#create-the-first-dataset","title":"Create the first dataset","text":"<p>In Power BI, we can import data from about 150 different data sources, either for a single load or for continuous queries over a live connection. For the sake of simplicity, the data to be processed in this lab will be obtained from a version of the relational database exported to Excel, which will be registered in the next steps.</p> <ol> <li> <p>Download the database fromAdventureWorksSales.xlsx. Open the file, get acquainted with the data in it!</p> </li> <li> <p>Launch the Power BI desktop application. Log in with your own ***@edu.bme.hu user.</p> <p></p> <p>Hint</p> <p>Power BI Desktop can be used without logging in, but publishing will require a logged in account. If you work on a shared (lab) computer, don't forget to log out at the end of the lab!</p> </li> <li> <p>Close the pop-up dialogs and save the project (File/Save) in any directory.Project name should be your Neptun code!</p> <p>Hint</p> <p>Everything we do in Power BI Desktop will go into this project file (NEPTUN.pbix). The project file must also be submitted together with screenshots of the solution.</p> </li> <li> <p>Load the previously downloaded AdventureWorksSales.xlsx file. (Get data /Excel workbook)</p> <p></p> </li> <li> <p>Select all the data tables (no data postfix in the name) and press the Load button.</p> <p></p> </li> <li> <p>You can check the results in the Data view and Model view views. Note that based on the naming conventions, the loader immediately recognized some of the foreign key relationships.</p> <p></p> </li> <li> <p>Note in the model that for dates, the relationships are not recognized by the loader. Let's create them by hand. Drag and drop the OrderDateKey, ShipDateKey  and DueDateKey fields from the Sales table one by one onto the DateKey column of the Date table.</p> <p></p> </li> </ol>"},{"location":"Lab-PowerBI/#lets-create-the-first-report","title":"Let's create the first report","text":"<ol> <li> <p>Let's switch to Report view.</p> </li> <li> <p>Add a new table to the current page.</p> <p></p> </li> <li> <p>Drag the following columns from the Data toolbar onto the table:</p> <ul> <li>Product/Category,</li> <li>Product/Model</li> <li>Product/Product</li> <li>Sales/Sales Amount</li> </ul> <p></p> </li> <li> <p>Note that the Product and Sales tables are in a one-to-many relationships, therefore, results from the Sales table are automatically summed together.</p> </li> <li> <p>Let's format the table. To do this, we use the Format your visual page of the Visualizations toolbar (make sure the table is constantly selected).</p> <ol> <li> <p>Choose the Alternating rows option for Style presets. This will give the table a default formatting.</p> </li> <li> <p>In the Values block, set the font size to 14, and set a custom Text color and Alternate text color.</p> </li> <li> <p>Resize the table so that the content fits nicely with the larger font size.</p> <p></p> </li> <li> <p>Increase the font size of the header (column headers)</p> </li> <li> <p>Turn off the summary (set the switch in the top right corner of Totals/Values to off)</p> </li> <li> <p>Let's Highlight the amount column. To do this, select Sum of Sales Amount column in the Specific column block, set the value of Text color to white, and set Background color to a darker color.</p> </li> <li> <p>At this point, our table looks something like this:</p> <p></p> </li> </ol> </li> </ol>"},{"location":"Lab-PowerBI/#creating-and-publishing-filters","title":"Creating and publishing filters","text":"<p>Below we define custom filters for the report and then publish our work.</p> <ol> <li> <p>Click the filter icon below the table to bring up the Filters toolbar. You can see that filters have already been created for the 4 columns.</p> <p></p> </li> <li> <p>Drag the SalesTerritory/Country column to the filters section. Now we can filter by country as needed.</p> </li> <li> <p>Hide the sales price filter. To do this, click the small eye icon inside the Sum of Sales Amount filter. Although the filter will still be visible to us, it will no longer appear as such in the published report.</p> <p></p> </li> <li> <p>Click on a section of the page where there is no table to select the page itself. The formatting in the Visualizations toolbar will then include settings for the entire page (Format page). Within this, we customize the appearance of the filters in the next steps.</p> </li> <li> <p>Set the Filter pane/Search property to a different bright color.</p> </li> <li> <p>Set the Filter pane/Background property to a darker color.</p> </li> <li> <p>Set the Filter cards/Background property to the same color as the  Filter pane/Search color. The end result could be something like this:</p> <p></p> </li> <li> <p>Save the changes and publish the completed report to the online service using the Publish button on the Home page.</p> <p></p> </li> <li> <p>When publishing, mark the default workspace as the destination (My Workspace)</p> <p></p> </li> <li> <p>After successful publication, click on the link in the dialog to open the report.</p> <p></p> </li> <li> <p>Let's experiment with our final report to see what we've done.</p> <p></p> </li> </ol> <p>SUBMISSION</p> <p>Take a screenshot of the published report. Save the image as <code>f1.png</code> and submit it with the other files of the solution. The image should show the entire screen (browser window, system tray, etc.). Check again that your Neptun code is visible (in the upper gray line)!</p> <p>Also upload the updated <code>NEPTUN.pbix</code> file.</p>"},{"location":"Lab-PowerBI/#2-task-chart-5-points","title":"2. Task: Chart (5 points)","text":""},{"location":"Lab-PowerBI/#create-chart","title":"Create chart","text":"<p>The tabular display shows the sales data in detail. However, a chart can be interpreted more quickly. Make a chart showing the sales volumes for each product category.</p> <ol> <li> <p>For this chart, create a new page in the report.</p> <p></p> </li> <li> <p>Let's use the opportunity to give meaningful names to the pages. Double-click the page names to rename them. Call the first page 'Table' and the new page 'Chart'</p> </li> <li> <p>Add a clustered column chart to the new page.</p> <p></p> </li> <li> <p>In the chart, we want to summarize the number of sales by product category. Here's how we can achieve this.</p> </li> <li> <p>Select the chart.</p> </li> <li> <p>You can specify the parameters on the Visualizations toolbars Build visual page. Drag the Product/Category column onto the X axis field and the Sales/Order quantity column onto the Y axis field.</p> <p></p> </li> </ol>"},{"location":"Lab-PowerBI/#annual-breakdown","title":"Annual breakdown","text":"<p>As a next step, we would like to look at the previous data in an annual breakdown. Since there are three types of dates in the Sales table (OrderDate,DueDate,ShipDate), we need to decide which one to use. For us, the order date will now be relevant, so we need to make sure that if we filter or group by Date table, the system takes this into account.</p> <ol> <li> <p>Open the Model view. Notice that there are three connections between the Sales and the Date table, but only one of them is highlighted by a continuous line, and the other two are dashed. The continuous line is the active link and will be the basis for subsequent grouping and filtering. Move the mouse cursor over each link to see which columns are connected. There can be no more than one active relationship between two tables.</p> <p></p> </li> <li> <p>If the OrderDateKey-DateKey connection is not the active one, we must first terminate the existing active connection. To do this, select it, and turn off the Make this relationship active option, then click Apply changes.</p> <p></p> </li> <li> <p>Similarly to the previous step sequence, select the line for the OrderDateKey-DateKey connection and make it active. Do not miss the Apply changes step.</p> <p>Hint</p> <p>There could be a situation where we want to categorize based on two types of dates at the same time. In this case, we can bypass the one-relation-one-active-connection limit by duplicating the Date table.</p> </li> <li> <p>To return to the report view, drag the Date/Fiscal Year column to the Legend property of the chart.</p> <p></p> </li> <li> <p>Publish the report in a similar way to the previous task. In the course of publishing, we will see that our previous report with this name is already in the cloud. Feel free to select the Replace option if you are asked to overwrite it.</p> </li> </ol> <p>SUBMISSION</p> <p>Take a screenshot of the published report. Save the image as <code>f2.png</code> and submit it with the other files of the solution. The image should show the entire screen (browser window, system tray, etc.). Check again that your Neptun code is visible (in the upper gray line)!</p>"},{"location":"Lab-PowerBI/#3-task-map-5-points","title":"3. Task: Map (5 points)","text":"<p>Power BI has a number of spectacular and intelligent diagram models. The following is a world map showing each country's sales by category.</p> <ol> <li>Add a new page with the name Map, add a Map on it and fill in its properties as follows</li> </ol> <p></p> <ol> <li> <p>Location should be set to SalesTerritory/country</p> </li> <li> <p>Bubble size should be set to Sales/order quantity</p> </li> <li> <p>Resize the map to fill in the page</p> <p>At this point, you can already see the bubbles proportional to the national sales data on the map. In the last step, we will  break down the data by categories, which we can do by using in the Legend field of the bar chart.</p> </li> <li> <p>Legend should be set to Product/category</p> <p></p> </li> <li> <p>Publish the report in a similar way to the previous task.</p> </li> </ol> <p>SUBMISSION</p> <p>Take a screenshot of the published report. Save the image as <code>f3.png</code> and submit it with the other files of the solution. The image should show the entire screen (browser window, system tray, etc.). Check again that your Neptun code is visible (in the upper gray line)!</p>"},{"location":"Lab-PowerBI/#4-task-sales-reports-5-points","title":"4. Task: Sales Reports (5 points)","text":"<p>In this exercise, you will learn about complex filters, line diagrams, and complex data</p>"},{"location":"Lab-PowerBI/#content-of-the-report","title":"Content of the report","text":"<p>Provide a report on how product sales for each category and subcategory have progressed year-on-year, including monthly breakdowns. Also visualize the results in a line chart.</p> <p>The final report should be similar to the following:</p> <p></p> <p>The solution steps are described below:</p>"},{"location":"Lab-PowerBI/#slicer","title":"Slicer","text":"<ol> <li> <p>Create a new page with the name Categories. A report similar to the sample will be achieved by using 3 different Visuals</p> </li> <li> <p>Put a Slicer on the report. It will function as a filter, by displaying the filter categories on the UI.</p> </li> <li> <p>Drag the Product/Category and Product/Subcategory columns on the Slicers Field property. (The order matters!). Try out the Slicer!</p> </li> </ol> <p></p>"},{"location":"Lab-PowerBI/#table","title":"Table","text":"<ol> <li> <p>Place a Table component next to the Slicer. If necessary, resize both of them so that their heights are aligned.</p> </li> <li> <p>In the table, order times will be grouped by year and month. Here, we take advantage of the system's \"understanding\" of how dates work so that the Date/date column can be expanded and the Year and Month fields can be used separately. Let's do this.</p> </li> <li> <p>Add the columns Sales/Sales Amount and Sales/Order Quantity to the table.</p> </li> <li> <p>Let's try out how selecting certain categories in the Slicer affects your current data.</p> </li> </ol> <p></p>"},{"location":"Lab-PowerBI/#line-chart","title":"Line chart","text":"<ol> <li> <p>Place a Line Chart component under the Slicer and the Table. Resize them as needed so that the width of the chart is the same as the elements above it.</p> </li> <li> <p>In the chart, we will plot the monthly sales data grouped by years.</p> </li> <li> <p>Set the X-Axis field of the chart. Its value should be Date/Date/Month while Y-Axis should be set to Sales/Sales amount.</p> </li> <li> <p>Use the Legend field to categorize the results by year, drag and drop the Date/Date/Year column onto it.</p> <p></p> </li> <li> <p>Finally, set the title of the graph. You can do this using the General tab on the Format your visual page in the Visualizations toolbar. Set the value of the Title field to your Neptun code, and in the same block, increase the font size, set the Text color field to red, and center the text (Horizontal alignment:Center)</p> <p></p> </li> </ol> <p>SUBMISSION</p> <p>Take a screenshot of the published report. Save the image as <code>f4.png</code> and submit it with the other files of the solution. The image should show the entire screen (browser window, system tray, etc.). Check again that your Neptun code is visible (in the upper gray line)!</p>"},{"location":"Lab-PowerBI/#5-task-optional-task","title":"5. Task: Optional task","text":"<p>You can earn 3 IMSc points by completing this task (only on hungarian special courses).</p> <p>Create a pie chart about the number of transactions in each product category. Enter your Neptune code in the title of the diagram..</p> <ul> <li> <p>Colors of the categories (as shown below) should be red, yellow, green and blue</p> </li> <li> <p>Data labels should be inside the pie chart</p> </li> <li> <p>Upload the completed report to the online Power BI service as well!</p> </li> <li> <p>The title of the chart should be your Neptun code and should be displayed centered and in bold</p> </li> <li> <p>The goal is to create a similar chart to the one below</p> </li> </ul> <p></p> <p>SUBMISSION</p> <p>Take a screenshot of the published report. Save the image as <code>f5.png</code> and submit it with the other files of the solution. The image should show the entire screen (browser window, system tray, etc.). Check again that your Neptun code is visible (in the upper gray line)!</p>"},{"location":"Lab-QueryOptimization/","title":"Query optimization","text":"<p>We will examine the query optimization behavior of Microsoft SQL Server. To properly understand the optimizer's behavior, in the first 5 exercises, we will explain the queries and the behavior too. The rest of the exercises is individual work where it is your task to infer the reason for a specific plan. Your task is to document the behavior and submit the documentation of all exercises in markdown format.</p>"},{"location":"Lab-QueryOptimization/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>Microsoft SQL Server<ul> <li>The free Express version is sufficient, or you may also use localdb installed with Visual Studio</li> <li>A Linux version is also available.</li> <li>On macOS, you can use Docker.</li> </ul> </li> <li>Visual Studio Code or any other tool for writing markdown</li> <li>SQL Server Management Studio, or you may also use the platform-independent Azure Data Studio is</li> <li>Database initialization script: mssql.sql</li> <li>GitHub account and a git client</li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Markdown introduction and detailed documentation</li> <li>Using Microsoft SQL Server: description</li> <li>The schema of the database</li> <li>Microsoft SQL Server query optimization data driven course materials</li> </ul>"},{"location":"Lab-QueryOptimization/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-QueryOptimization/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>Password in the labs</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-QueryOptimization/#open-the-markdown-file","title":"Open the markdown file","text":"<p>Create the documentation in a markdown file. Open the checked-out git repository with a markdown editor. We recommend using Visual Studio Code:</p> <ol> <li> <p>Start VS Code.</p> </li> <li> <p>Use File &gt; Open Folder... to open the git repository folder.</p> </li> <li> <p>In the folder structure on the left, find <code>README.md</code> and double click to open.</p> </li> <li> <p>Edit this file.</p> </li> <li> <p>When you create a screenshot, put the file in this directory next to the other files. This will enable you to use the file name to include the image.</p> <p>File name: lowercase English alphabet only</p> <p>You should avoid using special characters in the file names. Best if you use the English alphabet and no spaces either. The various platforms and git handle filenames differently. GitHub's web interface will only render the documentation with the images correctly if you only use all lowercase filenames with the English alphabet and no spaces.</p> </li> <li> <p>For convenient editing open the preview (Ctrl-K + V).</p> </li> </ol> <p>Alternative editor</p> <p>If you do not like VS code, you can also use the GitHub web interface to edit the markdown; you also have a preview here. File upload will be trickier.</p>"},{"location":"Lab-QueryOptimization/#create-the-database","title":"Create the database","text":"<ol> <li> <p>Connect to Microsoft SQL Server using SQL Server Management Studio. Start Management Studio and use the following connection details:</p> <ul> <li>Server name: <code>(localdb)\\mssqllocaldb</code> or <code>.\\sqlexpress</code> (which is short for: <code>localhost\\sqlexpress</code>)</li> <li>Authentication: <code>Windows authentication</code></li> </ul> </li> <li> <p>Create a new database (if it does not exist yet). The name should be your Neptun code: in Object Explorer right-click Databases and choose Create Database.</p> </li> <li> <p>Create the sample database by executing the initializer script Open a new Query window, paste the script into the window, then execute it. Make sure to select the correct database in the toolbar dropdown.</p> <p></p> </li> <li> <p>Verify that the tables are created. If the Tables folder was open before, you need to refresh it.</p> <p>.</p> </li> </ol>"},{"location":"Lab-QueryOptimization/#getting-the-actual-execution-plan","title":"Getting the actual execution plan","text":"<p>If you are not using Windows</p> <p>We are primarily using SQL Server Management Studio to get the execution plans. If you are not using Windows, you can also use Azure Data Studio-t to obtain the query plan.</p> <p>We will check the query plan the optimizer chose and the server executed in the following exercises. In SQL Server Management Studio, open the Query menu and check Include Actual Execution Plan.</p> <p></p> <p>The plan will be displayed after the query is completed at the bottom of the window on the Execution plan pane.</p> <p></p> <p>The plan is a data flow diagram where the query execution is the flow of the data. The items are the individual steps, and the percentages are the relative cost of each step with regards to the whole query.</p>"},{"location":"Lab-QueryOptimization/#exercises-with-solution-drafts","title":"Exercises with solution drafts","text":"<p>SUBMISSION</p> <p>The submission shall be a documentation written in the <code>README.md</code> file:</p> <ul> <li>document the SQL commands (if the exercise tells you to),</li> <li>a screenshot of the query plan (just the plan and not the entire desktop!),</li> <li>and an explanation: what do you see on the query plan and why the system chose this option.</li> </ul> <p>The documentation should correctly display with the images in the web interface of GitHub! You need to verify this during the submission: open the repository in the browser and switch to your branch; GitHub will automatically render the <code>README.md</code> file with the images.</p> <p>Submit your own work</p> <p>Even though the solutions are provided below, you are required to execute the queries, get the execution plan, think about it, and document it with your own words. Copying the explanations from below is not acceptable!</p> <p>If the query plan or the explanation of subsequent exercises is the same, or at least very similar, it is enough to document everything once (one screenshot and one reasoning); and list which (sub)exercises it is the solution for.</p>"},{"location":"Lab-QueryOptimization/#exercise-1-2p","title":"Exercise 1 (2p)","text":"<p>Drop the <code>CustomerSite</code> =&gt; <code>Customer</code> foreign key and the <code>Customer</code> table primary key constraint. Find these in the Object Explorer and delete them (the PK... is the primary key while the FK... is the foreign key - the ones you need to delete are in two different tables!):</p> <p></p> <p>Execute the following queries on the <code>Customer</code> table and examine the execution plans (always fetch the entire records using <code>select *</code>):</p> <ul> <li>a) query the whole table</li> <li>b) get one record based on primary key</li> <li>c) querying records where the primary key is not a specified constant (use the <code>&lt;&gt;</code> comparison operation for not equals)</li> <li>d) querying records where the primary key is greater than a specified constant</li> <li>e) querying records where the primary key is greater than a specified constant, ordering by ID descending  </li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p> Solution draft <p>The SQL queries:</p> <ul> <li>a) <code>select * from customer</code></li> <li>b) <code>select * from customer where id = 1</code></li> <li>c) <code>select * from customer where id &lt;&gt; 1</code></li> <li>d) <code>select * from customer where id &gt; 1</code></li> <li>e) <code>select * from customer where id &gt; 1 order by id desc</code></li> </ul> <p>a)-d)</p> <p>The execution plan is indentical for all, it uses a table scan each time:</p> <p></p> <p>Explanation: the optimizer cannot use any index, as there is none. Thus there is no other choice but to use a table scan.</p> <p>e)</p> <p>This one is a little different due to the order by there is a sort stage too.</p> <p></p> <p>Explanation: The table scan is the same, and after that, there is still a need for sorting - without any index, it is a separate stage.</p>"},{"location":"Lab-QueryOptimization/#exercise-2-2p","title":"Exercise 2 (2p)","text":"<p>Re-create the primary key of the <code>Customer</code> table:</p> <ul> <li>Right-click the table &gt; Design &gt; then right-click the ID column \"Set Primary Key \" then Save,</li> <li>or execute <code>ALTER TABLE [dbo].[Customer] ADD PRIMARY KEY CLUSTERED ([ID] ASC)</code></li> </ul> <p>Re-run the same queries as in the previous exercise. What do you experience?</p> Solution draft <p>The commands are the same as before.</p> <p>a)</p> <p></p> <p>The Clustered Index Scan iterates the table. We have a Clustered Index automatically created for the primary key, which has the records sorted by ID. By iterating through this index, all records are visited. This is almost identical to a Table Scan, though, not efficient. However, this is what we asked for here.</p> <p>b)</p> <p></p> <p>A Clustered Index Seek is enough. Since the filter criteria is for the ID, for which there is an index available, the matching record can be found quickly. This is an efficient plan; the Clustered Index is used for the exact purpose we created it for.</p> <p>c)</p> <p>Similar to the previous one, a Clustered Index Seek between two intervals (<code>&lt; constant</code>, <code>&gt; constant</code>). Since the filter criteria still references the ID field with a Clustered Index, the query will use this index. This is an efficient query.</p> <p>d)</p> <p>Very similar to the previous one with a range filter.</p> <p>e)</p> <p></p> <p>Clustered Index Seek with a backward seek order. The Properties window shows the Seek Order-t: find the last matching record, and walk the index backward, which will yield a sorted result set.</p>"},{"location":"Lab-QueryOptimization/#exercise-3-2p","title":"Exercise 3 (2p)","text":"<p>Execute the following queries on the <code>Product</code> table.</p> <ul> <li>f) query the whole table</li> <li>g) search for specific records where <code>Price</code> equals a value</li> <li>h) query records where <code>Price</code> is not a specified constant (&lt;&gt;)</li> <li>i) query records where <code>Price</code> is greater than a value</li> <li>j) query records where <code>Price</code> is greater than a value, ordered by <code>Price</code> descending</li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p> Solution draft <p>The SQL commands:</p> <ul> <li>f) <code>select * from product</code></li> <li>g) <code>select * from product where price = 800</code></li> <li>h) <code>select * from product where price &lt;&gt; 800</code></li> <li>i) <code>select * from product where price &gt; 800</code></li> <li>j) <code>select * from product where price &gt; 800 order by price desc</code></li> </ul> <p>f)-i)</p> <p></p> <p>A Clustered Index Scan iterates through the contents of the index. This is still equal to reading the entire table since there is no index to match the filter criteria. Although a Clustered Index is used, it does not serve any purpose in filtering; all records are visited, and the filter is evaluated for each. These are not efficient queries, as the existing index is of no use.</p> <p>j)</p> <p></p> <p>Still a Clustered Index Scan, but what is interesting is that cost of the sorting stage is quite large. Even after executing a costly Index Scan, we still have further sorting to do. A good index would help, but there is no index for the sorted column.</p>"},{"location":"Lab-QueryOptimization/#exercise-4-2p","title":"Exercise 4 (2p)","text":"<p>Add a new non-clustered index on column <code>Price</code>. How do the execution plans change?</p> <p>To add the index use Object Explorer, find the table, expand it, and right-click Indexes -&gt; New index &gt; Non-Clustered Index...</p> <p></p> <p>Indices should have meaningful names, e.g., <code>IX_Tablename_Fieldname</code>. Add Price column to the Index key columns list.</p> <p></p> <p>Repeat the queries from the previous exercise and explain the plans!</p> Solution draft <p>The SQL commands are the same as in the previous exercise.</p> <p>f)</p> <p>Despite the new index, it is still an Index Scan - since we asked for the contents of the entire table.</p> <p>g)-i)</p> <p>Clustered Index Scan iterating through the entire table, just as if there was no index available for the filtered column.</p> <p>Why does it not use the new index? The reason is the projection; that is, we query the entire record. The NonClustered Index could yield a set of record identifiers, after which the records themselves would still need to be queried. The optimizer decides that it is not worth doing so; an Index Scan is more efficient.</p> <p>j)</p> <p></p> <p>The NonClustered Index Seek yields keys, which are looked up in the Clustered Index, just like joining the two indices.</p> <p>We would have expected something similar in the previous queries too. The Clustered Index is needed as entire records are fetched as the NonClustered Index only provides references. However, these references are in the correct order (the NonClustered Index ensures it); so after the lookup in the Clustered Index, there is no further need to do the sorting. If only the Clustered Index were used (Clustered Index Scan), the sorting would have to be performed in a separate stage. This is an acceptable query, as the NonClustered Index helps in avoiding a costly sorting step.</p>"},{"location":"Lab-QueryOptimization/#exercise-5-2p","title":"Exercise 5 (2p)","text":"<p>Generate new records into the Product table with the script below. How do the execution plans change?</p> <p>When repeating the query for sub-exercise i), choose a constant value that will yield few resulting records, then choose a value that returns almost all records. Explain the differences!</p> <pre><code>SELECT TOP (1000000) n = ABS(CHECKSUM(NEWID()))\nINTO dbo.Numbers\nFROM sys.all_objects AS s1 CROSS JOIN sys.all_objects AS s2\nOPTION (MAXDOP 1);\n\nCREATE CLUSTERED INDEX n ON dbo.Numbers(n)\n;\n\n\nINSERT INTO Product(Name, Price, Stock, VATID, CategoryID)\nSELECT 'Apple', n%50000, n%100, 3, 13\nFROM Numbers\n</code></pre> Solution draft <p>The SQL commands are the same.</p> <p>f)</p> <p>Same as before.</p> <p>g)</p> <p></p> <p>References from the NonClustered Index Seek are looked up in the Clustered Index, just like joining the two indices.</p> <p>Let us compare this plan to the one from before having a smaller table. Why is the Clustered Index Scan not used now? In the case of larger tables, the selectivity (i.e., how many records match the filtering) is more important, hence the use of the NonClustered Index. The Clustered Index Scan would be too costly in a large table. The NonClustered Index can reduce the number of records, hence its role here. Based on the statistics of the <code>Price</code> column, it can be derived that the <code>=</code> operator will match few records. Important! Just because it is an <code>=</code> comparison, it does not directly follow that there are few matches; imagine the column having the same value in all records. Hence the need for the statistics!</p> <p>This is an acceptable query. Since the filtering reduces the number of records, it is worth using the index.</p> <p>h)</p> <p></p> <p>Clustered Index Scan as before.</p> <p>Why the difference compared to the previous case? If the <code>=</code> operator yields few matches, then <code>&lt;&gt;</code> will yield many. This is derived from the statistics too. So no use in doing the same as in the previous case; a Clustered Index Scan is probably more efficient.</p> <p>i)</p> <p>The plan depends on the constant. If it yields few matches, similar to g); otherwise the same as in h).</p> <p>j)</p> <p>Just like for g). Does the <code>order by desc</code> matter here? The optimizer tries to avoid sorting, and this is the only way to do so. This is an acceptable plan; by using the NonClustered Index there is no separate sorting stage.</p>"},{"location":"Lab-QueryOptimization/#individual-exercises","title":"Individual exercises","text":"<p>SUBMISSION</p> <p>Continue documenting the results the same way.</p> <p>Keep in mind that the documentation should correctly display with the images in the web interface of GitHub! You need to verify this during the submission: open the repository in the browser and switch to your branch; GitHub will automatically render the <code>README.md</code> file with the images.</p>"},{"location":"Lab-QueryOptimization/#exercise-6-1p","title":"Exercise 6 (1p)","text":"<p>Repeat the queries on the <code>Product</code> table, but instead of fetching the entire record, only get the <code>ID</code> and the <code>Price</code> columns. How do the execution plans change? Explain the differences!</p>"},{"location":"Lab-QueryOptimization/#exercise-7-1p","title":"Exercise 7 (1p)","text":"<p>Analyze the following queries executed on the <code>Product</code> table:</p> <ul> <li>k) query records where the primary key is between two values (use the <code>BETWEEN</code> operator)</li> <li>l) query records where the primary key is between two values (use the <code>BETWEEN</code> operator), or it is equal to a value that falls outside of this range</li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-8-1p","title":"Exercise 8 (1p)","text":"<p>In exercise 6, <code>WHERE Price=</code> compared an integer and a floating-point number. Let us experiment with other comparisons: query records from the <code>Product</code> table with the following filter criteria.</p> <ul> <li>m) <code>where cast(Price as int) = integer number</code></li> <li>n) <code>where Price BETWEEN integer number-0.0001 AND integer number+0.0001</code></li> </ul> <p>Choose a random integer number in these queries and fetch only the primary key. Analyze the execution plans.</p>"},{"location":"Lab-QueryOptimization/#exercise-9-1p","title":"Exercise 9 (1p)","text":"<p>Analyze the following queries execute on the <code>Product</code> table:</p> <ul> <li>o) query entire records where <code>Price</code> is less than a constant value (the filter should yield few matches), ordered by ID descending</li> <li>p) the same, but fetch only <code>ID</code> and <code>Price</code></li> <li>q) query entire records where <code>Price</code> is greater than a constant value (the filter should yield many matches), ordered by ID descending</li> <li>r) the same, but fetch only <code>ID</code> and <code>Price</code></li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-10-1p","title":"Exercise 10 (1p)","text":"<p>Create a new index for the <code>Name</code> column and analyze the following queries executed on the <code>Product</code> table:</p> <ul> <li>s) query names and IDs where the name begins with B - use function <code>SUBSTRING</code></li> <li>t) the same, but now using <code>LIKE</code></li> <li>u) query names and IDs where the name contains a B (LIKE)</li> <li>v) query the ID of a product where the name equals (=) a string</li> <li>w) the same, but now compare case-insensitively using <code>UPPER</code></li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-11-1p","title":"Exercise 11 (1p)","text":"<p>Analyze the following queries executed on the <code>Product</code> table:</p> <ul> <li>x) get the maximum of <code>Id</code></li> <li>y) get the minimum of <code>Price</code></li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-12-1p","title":"Exercise 12 (1p)","text":"<p>Query the number of products per category (<code>CategoryId</code>).</p> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-13-1p","title":"Exercise 13 (1p)","text":"<p>How could we improve on the performance of the previous query? Explain and implement the solution and repeat the previous query.</p> <p>Tip</p> <p>You need to add a new index. The question is: to which column?</p>"},{"location":"Lab-QueryOptimization/#exercise-14-1p","title":"Exercise 14 (1p)","text":"<p>List the <code>Name</code> of each <code>Product</code> where <code>CategoryId</code> equals 2.</p> <p>Document the SQL commands you used and explain the actual query execution plan! Explain whether the index added in the previous exercises helps the performance.</p>"},{"location":"Lab-QueryOptimization/#exercise-15-1p","title":"Exercise 15 (1p)","text":"<p>Improve the performance of the previous query. Extend the index added before by including the name: right-click the index -&gt; Properties -&gt; and add <code>Name</code> to Included columns.</p> <p>Repeat the previous query and analyze the plan.</p>"},{"location":"Lab-QueryOptimization/#optional-exercises","title":"Optional exercises","text":"<p>You can earn an additional +3 points with the completion of this exercise.</p>"},{"location":"Lab-QueryOptimization/#exercise-16","title":"Exercise 16","text":"<p>Compare the following <code>Invoice</code>-<code>InvoiceItem</code> query: for each invoice item get the customer name.</p> <pre><code>SELECT CustomerName, Name\nFROM Invoice JOIN InvoiceItem ON Invoice.ID = InvoiceItem.InvoiceID\n</code></pre> <p>Which join strategy was chosen? Explain why the system chose it!</p>"},{"location":"Lab-QueryOptimization/#exercise-17","title":"Exercise 17","text":"<p>Compare the various JOIN strategies when querying all <code>Product</code>-<code>Category</code> record pairs.</p> <p>Tip</p> <p>Use query hints or the option command to explicitly specify the join strategy.</p> <p>Put the 3 queries (each with a different join strategy) into one execution unit (execute them together). This will give you the relative cost of each option.</p> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"}]}